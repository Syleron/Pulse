// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/pulse.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MemberStatus_Status int32

const (
	MemberStatus_ACTIVE      MemberStatus_Status = 0
	MemberStatus_LEAVING     MemberStatus_Status = 1
	MemberStatus_PASSIVE     MemberStatus_Status = 2
	MemberStatus_UNAVAILABLE MemberStatus_Status = 3
	MemberStatus_SUSPICIOUS  MemberStatus_Status = 4
	MemberStatus_MONITORING  MemberStatus_Status = 5
)

var MemberStatus_Status_name = map[int32]string{
	0: "ACTIVE",
	1: "LEAVING",
	2: "PASSIVE",
	3: "UNAVAILABLE",
	4: "SUSPICIOUS",
	5: "MONITORING",
}

var MemberStatus_Status_value = map[string]int32{
	"ACTIVE":      0,
	"LEAVING":     1,
	"PASSIVE":     2,
	"UNAVAILABLE": 3,
	"SUSPICIOUS":  4,
	"MONITORING":  5,
}

func (x MemberStatus_Status) String() string {
	return proto.EnumName(MemberStatus_Status_name, int32(x))
}

func (MemberStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{2, 0}
}

type PulseLogs_Level int32

const (
	PulseLogs_INFO    PulseLogs_Level = 0
	PulseLogs_WARNING PulseLogs_Level = 1
	PulseLogs_ERROR   PulseLogs_Level = 2
	PulseLogs_DEBUG   PulseLogs_Level = 3
)

var PulseLogs_Level_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
	3: "DEBUG",
}

var PulseLogs_Level_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
	"DEBUG":   3,
}

func (x PulseLogs_Level) String() string {
	return proto.EnumName(PulseLogs_Level_name, int32(x))
}

func (PulseLogs_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{23, 0}
}

// Pulse Cluster Messages
type PulseHealthCheck struct {
	Success              bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Memberlist           []*MemberlistMember `protobuf:"bytes,2,rep,name=memberlist,proto3" json:"memberlist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PulseHealthCheck) Reset()         { *m = PulseHealthCheck{} }
func (m *PulseHealthCheck) String() string { return proto.CompactTextString(m) }
func (*PulseHealthCheck) ProtoMessage()    {}
func (*PulseHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{0}
}

func (m *PulseHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseHealthCheck.Unmarshal(m, b)
}
func (m *PulseHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseHealthCheck.Marshal(b, m, deterministic)
}
func (m *PulseHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseHealthCheck.Merge(m, src)
}
func (m *PulseHealthCheck) XXX_Size() int {
	return xxx_messageInfo_PulseHealthCheck.Size(m)
}
func (m *PulseHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_PulseHealthCheck proto.InternalMessageInfo

func (m *PulseHealthCheck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseHealthCheck) GetMemberlist() []*MemberlistMember {
	if m != nil {
		return m.Memberlist
	}
	return nil
}

type MemberlistMember struct {
	Hostname             string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Status               MemberStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=proto.MemberStatus_Status" json:"status,omitempty"`
	LastReceived         string              `protobuf:"bytes,3,opt,name=lastReceived,proto3" json:"lastReceived,omitempty"`
	Latency              string              `protobuf:"bytes,4,opt,name=latency,proto3" json:"latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MemberlistMember) Reset()         { *m = MemberlistMember{} }
func (m *MemberlistMember) String() string { return proto.CompactTextString(m) }
func (*MemberlistMember) ProtoMessage()    {}
func (*MemberlistMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{1}
}

func (m *MemberlistMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberlistMember.Unmarshal(m, b)
}
func (m *MemberlistMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberlistMember.Marshal(b, m, deterministic)
}
func (m *MemberlistMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberlistMember.Merge(m, src)
}
func (m *MemberlistMember) XXX_Size() int {
	return xxx_messageInfo_MemberlistMember.Size(m)
}
func (m *MemberlistMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberlistMember.DiscardUnknown(m)
}

var xxx_messageInfo_MemberlistMember proto.InternalMessageInfo

func (m *MemberlistMember) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *MemberlistMember) GetStatus() MemberStatus_Status {
	if m != nil {
		return m.Status
	}
	return MemberStatus_ACTIVE
}

func (m *MemberlistMember) GetLastReceived() string {
	if m != nil {
		return m.LastReceived
	}
	return ""
}

func (m *MemberlistMember) GetLatency() string {
	if m != nil {
		return m.Latency
	}
	return ""
}

type MemberStatus struct {
	Status               MemberStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.MemberStatus_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MemberStatus) Reset()         { *m = MemberStatus{} }
func (m *MemberStatus) String() string { return proto.CompactTextString(m) }
func (*MemberStatus) ProtoMessage()    {}
func (*MemberStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{2}
}

func (m *MemberStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberStatus.Unmarshal(m, b)
}
func (m *MemberStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberStatus.Marshal(b, m, deterministic)
}
func (m *MemberStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberStatus.Merge(m, src)
}
func (m *MemberStatus) XXX_Size() int {
	return xxx_messageInfo_MemberStatus.Size(m)
}
func (m *MemberStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MemberStatus proto.InternalMessageInfo

func (m *MemberStatus) GetStatus() MemberStatus_Status {
	if m != nil {
		return m.Status
	}
	return MemberStatus_ACTIVE
}

type PulseJoin struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BindIp               string   `protobuf:"bytes,3,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
	BindPort             string   `protobuf:"bytes,4,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,6,opt,name=port,proto3" json:"port,omitempty"`
	Hostname             string   `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Replicated           bool     `protobuf:"varint,8,opt,name=replicated,proto3" json:"replicated,omitempty"`
	Config               []byte   `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	Token                string   `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	CaCrt                string   `protobuf:"bytes,11,opt,name=ca_crt,json=caCrt,proto3" json:"ca_crt,omitempty"`
	CaKey                string   `protobuf:"bytes,12,opt,name=ca_key,json=caKey,proto3" json:"ca_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseJoin) Reset()         { *m = PulseJoin{} }
func (m *PulseJoin) String() string { return proto.CompactTextString(m) }
func (*PulseJoin) ProtoMessage()    {}
func (*PulseJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{3}
}

func (m *PulseJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseJoin.Unmarshal(m, b)
}
func (m *PulseJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseJoin.Marshal(b, m, deterministic)
}
func (m *PulseJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseJoin.Merge(m, src)
}
func (m *PulseJoin) XXX_Size() int {
	return xxx_messageInfo_PulseJoin.Size(m)
}
func (m *PulseJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseJoin.DiscardUnknown(m)
}

var xxx_messageInfo_PulseJoin proto.InternalMessageInfo

func (m *PulseJoin) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseJoin) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseJoin) GetBindIp() string {
	if m != nil {
		return m.BindIp
	}
	return ""
}

func (m *PulseJoin) GetBindPort() string {
	if m != nil {
		return m.BindPort
	}
	return ""
}

func (m *PulseJoin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PulseJoin) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PulseJoin) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PulseJoin) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

func (m *PulseJoin) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *PulseJoin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PulseJoin) GetCaCrt() string {
	if m != nil {
		return m.CaCrt
	}
	return ""
}

func (m *PulseJoin) GetCaKey() string {
	if m != nil {
		return m.CaKey
	}
	return ""
}

type PulseLeave struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Replicated           bool     `protobuf:"varint,4,opt,name=replicated,proto3" json:"replicated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseLeave) Reset()         { *m = PulseLeave{} }
func (m *PulseLeave) String() string { return proto.CompactTextString(m) }
func (*PulseLeave) ProtoMessage()    {}
func (*PulseLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{4}
}

func (m *PulseLeave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseLeave.Unmarshal(m, b)
}
func (m *PulseLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseLeave.Marshal(b, m, deterministic)
}
func (m *PulseLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseLeave.Merge(m, src)
}
func (m *PulseLeave) XXX_Size() int {
	return xxx_messageInfo_PulseLeave.Size(m)
}
func (m *PulseLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseLeave.DiscardUnknown(m)
}

var xxx_messageInfo_PulseLeave proto.InternalMessageInfo

func (m *PulseLeave) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseLeave) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseLeave) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PulseLeave) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

type PulseRemove struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Replicated           bool     `protobuf:"varint,4,opt,name=replicated,proto3" json:"replicated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseRemove) Reset()         { *m = PulseRemove{} }
func (m *PulseRemove) String() string { return proto.CompactTextString(m) }
func (*PulseRemove) ProtoMessage()    {}
func (*PulseRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{5}
}

func (m *PulseRemove) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseRemove.Unmarshal(m, b)
}
func (m *PulseRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseRemove.Marshal(b, m, deterministic)
}
func (m *PulseRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseRemove.Merge(m, src)
}
func (m *PulseRemove) XXX_Size() int {
	return xxx_messageInfo_PulseRemove.Size(m)
}
func (m *PulseRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseRemove.DiscardUnknown(m)
}

var xxx_messageInfo_PulseRemove proto.InternalMessageInfo

func (m *PulseRemove) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseRemove) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseRemove) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PulseRemove) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

type PulseCreate struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BindIp               string   `protobuf:"bytes,3,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
	BindPort             string   `protobuf:"bytes,4,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseCreate) Reset()         { *m = PulseCreate{} }
func (m *PulseCreate) String() string { return proto.CompactTextString(m) }
func (*PulseCreate) ProtoMessage()    {}
func (*PulseCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{6}
}

func (m *PulseCreate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseCreate.Unmarshal(m, b)
}
func (m *PulseCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseCreate.Marshal(b, m, deterministic)
}
func (m *PulseCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseCreate.Merge(m, src)
}
func (m *PulseCreate) XXX_Size() int {
	return xxx_messageInfo_PulseCreate.Size(m)
}
func (m *PulseCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseCreate.DiscardUnknown(m)
}

var xxx_messageInfo_PulseCreate proto.InternalMessageInfo

func (m *PulseCreate) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseCreate) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseCreate) GetBindIp() string {
	if m != nil {
		return m.BindIp
	}
	return ""
}

func (m *PulseCreate) GetBindPort() string {
	if m != nil {
		return m.BindPort
	}
	return ""
}

func (m *PulseCreate) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PulseCert struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BindIp               string   `protobuf:"bytes,3,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseCert) Reset()         { *m = PulseCert{} }
func (m *PulseCert) String() string { return proto.CompactTextString(m) }
func (*PulseCert) ProtoMessage()    {}
func (*PulseCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{7}
}

func (m *PulseCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseCert.Unmarshal(m, b)
}
func (m *PulseCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseCert.Marshal(b, m, deterministic)
}
func (m *PulseCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseCert.Merge(m, src)
}
func (m *PulseCert) XXX_Size() int {
	return xxx_messageInfo_PulseCert.Size(m)
}
func (m *PulseCert) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseCert.DiscardUnknown(m)
}

var xxx_messageInfo_PulseCert proto.InternalMessageInfo

func (m *PulseCert) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseCert) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseCert) GetBindIp() string {
	if m != nil {
		return m.BindIp
	}
	return ""
}

// Pulse Group Messages
type PulseGroupNew struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseGroupNew) Reset()         { *m = PulseGroupNew{} }
func (m *PulseGroupNew) String() string { return proto.CompactTextString(m) }
func (*PulseGroupNew) ProtoMessage()    {}
func (*PulseGroupNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{8}
}

func (m *PulseGroupNew) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseGroupNew.Unmarshal(m, b)
}
func (m *PulseGroupNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseGroupNew.Marshal(b, m, deterministic)
}
func (m *PulseGroupNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseGroupNew.Merge(m, src)
}
func (m *PulseGroupNew) XXX_Size() int {
	return xxx_messageInfo_PulseGroupNew.Size(m)
}
func (m *PulseGroupNew) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseGroupNew.DiscardUnknown(m)
}

var xxx_messageInfo_PulseGroupNew proto.InternalMessageInfo

func (m *PulseGroupNew) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupNew) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupNew) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PulseGroupDelete struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseGroupDelete) Reset()         { *m = PulseGroupDelete{} }
func (m *PulseGroupDelete) String() string { return proto.CompactTextString(m) }
func (*PulseGroupDelete) ProtoMessage()    {}
func (*PulseGroupDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{9}
}

func (m *PulseGroupDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseGroupDelete.Unmarshal(m, b)
}
func (m *PulseGroupDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseGroupDelete.Marshal(b, m, deterministic)
}
func (m *PulseGroupDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseGroupDelete.Merge(m, src)
}
func (m *PulseGroupDelete) XXX_Size() int {
	return xxx_messageInfo_PulseGroupDelete.Size(m)
}
func (m *PulseGroupDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseGroupDelete.DiscardUnknown(m)
}

var xxx_messageInfo_PulseGroupDelete proto.InternalMessageInfo

func (m *PulseGroupDelete) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupDelete) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PulseGroupAdd struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ips                  []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseGroupAdd) Reset()         { *m = PulseGroupAdd{} }
func (m *PulseGroupAdd) String() string { return proto.CompactTextString(m) }
func (*PulseGroupAdd) ProtoMessage()    {}
func (*PulseGroupAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{10}
}

func (m *PulseGroupAdd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseGroupAdd.Unmarshal(m, b)
}
func (m *PulseGroupAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseGroupAdd.Marshal(b, m, deterministic)
}
func (m *PulseGroupAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseGroupAdd.Merge(m, src)
}
func (m *PulseGroupAdd) XXX_Size() int {
	return xxx_messageInfo_PulseGroupAdd.Size(m)
}
func (m *PulseGroupAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseGroupAdd.DiscardUnknown(m)
}

var xxx_messageInfo_PulseGroupAdd proto.InternalMessageInfo

func (m *PulseGroupAdd) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupAdd) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupAdd) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PulseGroupAdd) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

type PulseGroupRemove struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ips                  []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseGroupRemove) Reset()         { *m = PulseGroupRemove{} }
func (m *PulseGroupRemove) String() string { return proto.CompactTextString(m) }
func (*PulseGroupRemove) ProtoMessage()    {}
func (*PulseGroupRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{11}
}

func (m *PulseGroupRemove) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseGroupRemove.Unmarshal(m, b)
}
func (m *PulseGroupRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseGroupRemove.Marshal(b, m, deterministic)
}
func (m *PulseGroupRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseGroupRemove.Merge(m, src)
}
func (m *PulseGroupRemove) XXX_Size() int {
	return xxx_messageInfo_PulseGroupRemove.Size(m)
}
func (m *PulseGroupRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseGroupRemove.DiscardUnknown(m)
}

var xxx_messageInfo_PulseGroupRemove proto.InternalMessageInfo

func (m *PulseGroupRemove) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupRemove) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupRemove) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PulseGroupRemove) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

type PulseGroupAssign struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Interface            string   `protobuf:"bytes,4,opt,name=interface,proto3" json:"interface,omitempty"`
	Node                 string   `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseGroupAssign) Reset()         { *m = PulseGroupAssign{} }
func (m *PulseGroupAssign) String() string { return proto.CompactTextString(m) }
func (*PulseGroupAssign) ProtoMessage()    {}
func (*PulseGroupAssign) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{12}
}

func (m *PulseGroupAssign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseGroupAssign.Unmarshal(m, b)
}
func (m *PulseGroupAssign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseGroupAssign.Marshal(b, m, deterministic)
}
func (m *PulseGroupAssign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseGroupAssign.Merge(m, src)
}
func (m *PulseGroupAssign) XXX_Size() int {
	return xxx_messageInfo_PulseGroupAssign.Size(m)
}
func (m *PulseGroupAssign) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseGroupAssign.DiscardUnknown(m)
}

var xxx_messageInfo_PulseGroupAssign proto.InternalMessageInfo

func (m *PulseGroupAssign) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupAssign) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupAssign) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PulseGroupAssign) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *PulseGroupAssign) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type PulseGroupUnassign struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Interface            string   `protobuf:"bytes,4,opt,name=interface,proto3" json:"interface,omitempty"`
	Node                 string   `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseGroupUnassign) Reset()         { *m = PulseGroupUnassign{} }
func (m *PulseGroupUnassign) String() string { return proto.CompactTextString(m) }
func (*PulseGroupUnassign) ProtoMessage()    {}
func (*PulseGroupUnassign) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{13}
}

func (m *PulseGroupUnassign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseGroupUnassign.Unmarshal(m, b)
}
func (m *PulseGroupUnassign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseGroupUnassign.Marshal(b, m, deterministic)
}
func (m *PulseGroupUnassign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseGroupUnassign.Merge(m, src)
}
func (m *PulseGroupUnassign) XXX_Size() int {
	return xxx_messageInfo_PulseGroupUnassign.Size(m)
}
func (m *PulseGroupUnassign) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseGroupUnassign.DiscardUnknown(m)
}

var xxx_messageInfo_PulseGroupUnassign proto.InternalMessageInfo

func (m *PulseGroupUnassign) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupUnassign) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupUnassign) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PulseGroupUnassign) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *PulseGroupUnassign) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type PulseStatus struct {
	Success              bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Row                  []*StatusRow `protobuf:"bytes,3,rep,name=row,proto3" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PulseStatus) Reset()         { *m = PulseStatus{} }
func (m *PulseStatus) String() string { return proto.CompactTextString(m) }
func (*PulseStatus) ProtoMessage()    {}
func (*PulseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{14}
}

func (m *PulseStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseStatus.Unmarshal(m, b)
}
func (m *PulseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseStatus.Marshal(b, m, deterministic)
}
func (m *PulseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseStatus.Merge(m, src)
}
func (m *PulseStatus) XXX_Size() int {
	return xxx_messageInfo_PulseStatus.Size(m)
}
func (m *PulseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PulseStatus proto.InternalMessageInfo

func (m *PulseStatus) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseStatus) GetRow() []*StatusRow {
	if m != nil {
		return m.Row
	}
	return nil
}

type StatusRow struct {
	Hostname             string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string              `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Latency              string              `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Status               MemberStatus_Status `protobuf:"varint,4,opt,name=status,proto3,enum=proto.MemberStatus_Status" json:"status,omitempty"`
	LastReceived         string              `protobuf:"bytes,5,opt,name=lastReceived,proto3" json:"lastReceived,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StatusRow) Reset()         { *m = StatusRow{} }
func (m *StatusRow) String() string { return proto.CompactTextString(m) }
func (*StatusRow) ProtoMessage()    {}
func (*StatusRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{15}
}

func (m *StatusRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusRow.Unmarshal(m, b)
}
func (m *StatusRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusRow.Marshal(b, m, deterministic)
}
func (m *StatusRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRow.Merge(m, src)
}
func (m *StatusRow) XXX_Size() int {
	return xxx_messageInfo_StatusRow.Size(m)
}
func (m *StatusRow) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRow.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRow proto.InternalMessageInfo

func (m *StatusRow) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *StatusRow) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *StatusRow) GetLatency() string {
	if m != nil {
		return m.Latency
	}
	return ""
}

func (m *StatusRow) GetStatus() MemberStatus_Status {
	if m != nil {
		return m.Status
	}
	return MemberStatus_ACTIVE
}

func (m *StatusRow) GetLastReceived() string {
	if m != nil {
		return m.LastReceived
	}
	return ""
}

type GroupTable struct {
	Success              bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Row                  []*GroupRow `protobuf:"bytes,3,rep,name=row,proto3" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GroupTable) Reset()         { *m = GroupTable{} }
func (m *GroupTable) String() string { return proto.CompactTextString(m) }
func (*GroupTable) ProtoMessage()    {}
func (*GroupTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{16}
}

func (m *GroupTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupTable.Unmarshal(m, b)
}
func (m *GroupTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupTable.Marshal(b, m, deterministic)
}
func (m *GroupTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupTable.Merge(m, src)
}
func (m *GroupTable) XXX_Size() int {
	return xxx_messageInfo_GroupTable.Size(m)
}
func (m *GroupTable) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupTable.DiscardUnknown(m)
}

var xxx_messageInfo_GroupTable proto.InternalMessageInfo

func (m *GroupTable) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GroupTable) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GroupTable) GetRow() []*GroupRow {
	if m != nil {
		return m.Row
	}
	return nil
}

type GroupRow struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip                   []string `protobuf:"bytes,2,rep,name=ip,proto3" json:"ip,omitempty"`
	Nodes                []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Interfaces           []string `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupRow) Reset()         { *m = GroupRow{} }
func (m *GroupRow) String() string { return proto.CompactTextString(m) }
func (*GroupRow) ProtoMessage()    {}
func (*GroupRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{17}
}

func (m *GroupRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupRow.Unmarshal(m, b)
}
func (m *GroupRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupRow.Marshal(b, m, deterministic)
}
func (m *GroupRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRow.Merge(m, src)
}
func (m *GroupRow) XXX_Size() int {
	return xxx_messageInfo_GroupRow.Size(m)
}
func (m *GroupRow) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRow.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRow proto.InternalMessageInfo

func (m *GroupRow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupRow) GetIp() []string {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *GroupRow) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *GroupRow) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type PulseConfigSync struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Config               []byte   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Replicated           bool     `protobuf:"varint,4,opt,name=replicated,proto3" json:"replicated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseConfigSync) Reset()         { *m = PulseConfigSync{} }
func (m *PulseConfigSync) String() string { return proto.CompactTextString(m) }
func (*PulseConfigSync) ProtoMessage()    {}
func (*PulseConfigSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{18}
}

func (m *PulseConfigSync) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseConfigSync.Unmarshal(m, b)
}
func (m *PulseConfigSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseConfigSync.Marshal(b, m, deterministic)
}
func (m *PulseConfigSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseConfigSync.Merge(m, src)
}
func (m *PulseConfigSync) XXX_Size() int {
	return xxx_messageInfo_PulseConfigSync.Size(m)
}
func (m *PulseConfigSync) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseConfigSync.DiscardUnknown(m)
}

var xxx_messageInfo_PulseConfigSync proto.InternalMessageInfo

func (m *PulseConfigSync) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseConfigSync) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseConfigSync) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *PulseConfigSync) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

type PulsePromote struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Member               string   `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulsePromote) Reset()         { *m = PulsePromote{} }
func (m *PulsePromote) String() string { return proto.CompactTextString(m) }
func (*PulsePromote) ProtoMessage()    {}
func (*PulsePromote) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{19}
}

func (m *PulsePromote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulsePromote.Unmarshal(m, b)
}
func (m *PulsePromote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulsePromote.Marshal(b, m, deterministic)
}
func (m *PulsePromote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulsePromote.Merge(m, src)
}
func (m *PulsePromote) XXX_Size() int {
	return xxx_messageInfo_PulsePromote.Size(m)
}
func (m *PulsePromote) XXX_DiscardUnknown() {
	xxx_messageInfo_PulsePromote.DiscardUnknown(m)
}

var xxx_messageInfo_PulsePromote proto.InternalMessageInfo

func (m *PulsePromote) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulsePromote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulsePromote) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

type PulseBringIP struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Iface                string   `protobuf:"bytes,3,opt,name=iface,proto3" json:"iface,omitempty"`
	Ips                  []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseBringIP) Reset()         { *m = PulseBringIP{} }
func (m *PulseBringIP) String() string { return proto.CompactTextString(m) }
func (*PulseBringIP) ProtoMessage()    {}
func (*PulseBringIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{20}
}

func (m *PulseBringIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseBringIP.Unmarshal(m, b)
}
func (m *PulseBringIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseBringIP.Marshal(b, m, deterministic)
}
func (m *PulseBringIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseBringIP.Merge(m, src)
}
func (m *PulseBringIP) XXX_Size() int {
	return xxx_messageInfo_PulseBringIP.Size(m)
}
func (m *PulseBringIP) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseBringIP.DiscardUnknown(m)
}

var xxx_messageInfo_PulseBringIP proto.InternalMessageInfo

func (m *PulseBringIP) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseBringIP) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseBringIP) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

func (m *PulseBringIP) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

type PulseConfig struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseConfig) Reset()         { *m = PulseConfig{} }
func (m *PulseConfig) String() string { return proto.CompactTextString(m) }
func (*PulseConfig) ProtoMessage()    {}
func (*PulseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{21}
}

func (m *PulseConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseConfig.Unmarshal(m, b)
}
func (m *PulseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseConfig.Marshal(b, m, deterministic)
}
func (m *PulseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseConfig.Merge(m, src)
}
func (m *PulseConfig) XXX_Size() int {
	return xxx_messageInfo_PulseConfig.Size(m)
}
func (m *PulseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PulseConfig proto.InternalMessageInfo

func (m *PulseConfig) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseConfig) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseConfig) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PulseConfig) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PulseToken struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PulseToken) Reset()         { *m = PulseToken{} }
func (m *PulseToken) String() string { return proto.CompactTextString(m) }
func (*PulseToken) ProtoMessage()    {}
func (*PulseToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{22}
}

func (m *PulseToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseToken.Unmarshal(m, b)
}
func (m *PulseToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseToken.Marshal(b, m, deterministic)
}
func (m *PulseToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseToken.Merge(m, src)
}
func (m *PulseToken) XXX_Size() int {
	return xxx_messageInfo_PulseToken.Size(m)
}
func (m *PulseToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseToken.DiscardUnknown(m)
}

var xxx_messageInfo_PulseToken proto.InternalMessageInfo

func (m *PulseToken) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseToken) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PulseLogs struct {
	Message              string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Node                 string          `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Level                PulseLogs_Level `protobuf:"varint,3,opt,name=level,proto3,enum=proto.PulseLogs_Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PulseLogs) Reset()         { *m = PulseLogs{} }
func (m *PulseLogs) String() string { return proto.CompactTextString(m) }
func (*PulseLogs) ProtoMessage()    {}
func (*PulseLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f81023e44d234bdd, []int{23}
}

func (m *PulseLogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulseLogs.Unmarshal(m, b)
}
func (m *PulseLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulseLogs.Marshal(b, m, deterministic)
}
func (m *PulseLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseLogs.Merge(m, src)
}
func (m *PulseLogs) XXX_Size() int {
	return xxx_messageInfo_PulseLogs.Size(m)
}
func (m *PulseLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseLogs.DiscardUnknown(m)
}

var xxx_messageInfo_PulseLogs proto.InternalMessageInfo

func (m *PulseLogs) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseLogs) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *PulseLogs) GetLevel() PulseLogs_Level {
	if m != nil {
		return m.Level
	}
	return PulseLogs_INFO
}

func init() {
	proto.RegisterEnum("proto.MemberStatus_Status", MemberStatus_Status_name, MemberStatus_Status_value)
	proto.RegisterEnum("proto.PulseLogs_Level", PulseLogs_Level_name, PulseLogs_Level_value)
	proto.RegisterType((*PulseHealthCheck)(nil), "proto.PulseHealthCheck")
	proto.RegisterType((*MemberlistMember)(nil), "proto.MemberlistMember")
	proto.RegisterType((*MemberStatus)(nil), "proto.MemberStatus")
	proto.RegisterType((*PulseJoin)(nil), "proto.PulseJoin")
	proto.RegisterType((*PulseLeave)(nil), "proto.PulseLeave")
	proto.RegisterType((*PulseRemove)(nil), "proto.PulseRemove")
	proto.RegisterType((*PulseCreate)(nil), "proto.PulseCreate")
	proto.RegisterType((*PulseCert)(nil), "proto.PulseCert")
	proto.RegisterType((*PulseGroupNew)(nil), "proto.PulseGroupNew")
	proto.RegisterType((*PulseGroupDelete)(nil), "proto.PulseGroupDelete")
	proto.RegisterType((*PulseGroupAdd)(nil), "proto.PulseGroupAdd")
	proto.RegisterType((*PulseGroupRemove)(nil), "proto.PulseGroupRemove")
	proto.RegisterType((*PulseGroupAssign)(nil), "proto.PulseGroupAssign")
	proto.RegisterType((*PulseGroupUnassign)(nil), "proto.PulseGroupUnassign")
	proto.RegisterType((*PulseStatus)(nil), "proto.PulseStatus")
	proto.RegisterType((*StatusRow)(nil), "proto.StatusRow")
	proto.RegisterType((*GroupTable)(nil), "proto.GroupTable")
	proto.RegisterType((*GroupRow)(nil), "proto.GroupRow")
	proto.RegisterType((*PulseConfigSync)(nil), "proto.PulseConfigSync")
	proto.RegisterType((*PulsePromote)(nil), "proto.PulsePromote")
	proto.RegisterType((*PulseBringIP)(nil), "proto.PulseBringIP")
	proto.RegisterType((*PulseConfig)(nil), "proto.PulseConfig")
	proto.RegisterType((*PulseToken)(nil), "proto.PulseToken")
	proto.RegisterType((*PulseLogs)(nil), "proto.PulseLogs")
}

func init() { proto.RegisterFile("proto/pulse.proto", fileDescriptor_f81023e44d234bdd) }

var fileDescriptor_f81023e44d234bdd = []byte{
	// 1236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0x71, 0xe2, 0xc4, 0x93, 0x5e, 0xcf, 0xb7, 0x94, 0x9e, 0x31, 0x08, 0x15, 0x3f, 0x95,
	0x13, 0x14, 0xc8, 0x01, 0xc7, 0x03, 0x12, 0xf2, 0xa5, 0xa1, 0x18, 0xd2, 0x34, 0x72, 0x9a, 0x1e,
	0xba, 0x97, 0xca, 0x75, 0xf6, 0x52, 0x53, 0xc7, 0xb6, 0x6c, 0x37, 0x55, 0x25, 0xee, 0x23, 0x80,
	0xf8, 0x02, 0x20, 0x24, 0x9e, 0x78, 0xe4, 0x5b, 0xf1, 0x31, 0xd0, 0xfe, 0x71, 0xba, 0xae, 0x93,
	0x72, 0x35, 0x07, 0xf7, 0x94, 0x9d, 0xdf, 0x78, 0x67, 0x66, 0x67, 0x67, 0xe7, 0x37, 0x81, 0x7b,
	0x71, 0x12, 0x65, 0xd1, 0x87, 0xf1, 0x79, 0x90, 0xe2, 0x1d, 0xba, 0x46, 0x0d, 0xfa, 0x63, 0x62,
	0xd0, 0x86, 0x04, 0xfd, 0x1a, 0xbb, 0x41, 0x76, 0xda, 0x3d, 0xc5, 0xde, 0x19, 0xd2, 0xa1, 0x99,
	0x9e, 0x7b, 0x1e, 0x4e, 0x53, 0x5d, 0xda, 0x92, 0xb6, 0x5b, 0x4e, 0x2e, 0xa2, 0x47, 0x00, 0x33,
	0x3c, 0x3b, 0xc1, 0x49, 0xe0, 0xa7, 0x99, 0x5e, 0xdb, 0x92, 0xb7, 0xdb, 0x9d, 0xfb, 0xcc, 0xe0,
	0xce, 0xfe, 0x42, 0xc1, 0x56, 0x8e, 0xf0, 0xa9, 0xf9, 0x9b, 0x04, 0xda, 0xf5, 0x0f, 0x90, 0x01,
	0xad, 0xd3, 0x28, 0xcd, 0x42, 0x77, 0x86, 0xa9, 0x23, 0xd5, 0x59, 0xc8, 0xa8, 0x03, 0x4a, 0x9a,
	0xb9, 0xd9, 0x79, 0xaa, 0xd7, 0xb6, 0xa4, 0xed, 0xf5, 0x8e, 0x51, 0xf0, 0x32, 0xa2, 0xaa, 0x1d,
	0xf6, 0xe3, 0xf0, 0x2f, 0x91, 0x09, 0x6b, 0x81, 0x9b, 0x66, 0x0e, 0xf6, 0xb0, 0x3f, 0xc7, 0x13,
	0x5d, 0xa6, 0x36, 0x0b, 0x18, 0x39, 0x5b, 0xe0, 0x66, 0x38, 0xf4, 0x2e, 0xf5, 0x3a, 0x55, 0xe7,
	0xa2, 0xf9, 0xbb, 0x04, 0x6b, 0xa2, 0x75, 0x21, 0x04, 0xe9, 0x45, 0x43, 0x30, 0x8f, 0x41, 0xe1,
	0xbb, 0x01, 0x14, 0xab, 0x7b, 0x68, 0x1f, 0xf5, 0xb4, 0xd7, 0x50, 0x1b, 0x9a, 0xfd, 0x9e, 0x75,
	0x64, 0x0f, 0xf6, 0x34, 0x89, 0x08, 0x43, 0x6b, 0x34, 0x22, 0x9a, 0x1a, 0xba, 0x0b, 0xed, 0xf1,
	0xc0, 0x3a, 0xb2, 0xec, 0xbe, 0xf5, 0xb8, 0xdf, 0xd3, 0x64, 0xb4, 0x0e, 0x30, 0x1a, 0x8f, 0x86,
	0x76, 0xd7, 0x3e, 0x18, 0x8f, 0xb4, 0x3a, 0x91, 0xf7, 0x0f, 0x06, 0xf6, 0xe1, 0x81, 0x43, 0x76,
	0x37, 0xcc, 0x3f, 0x6b, 0xa0, 0xd2, 0x0b, 0xfb, 0x26, 0xf2, 0xc3, 0x1b, 0x6e, 0x4a, 0x87, 0xe6,
	0x0c, 0xa7, 0xa9, 0x3b, 0xc5, 0x34, 0x81, 0xaa, 0x93, 0x8b, 0xe8, 0x3e, 0x34, 0x4f, 0xfc, 0x70,
	0x72, 0xec, 0xc7, 0x3c, 0x41, 0x0a, 0x11, 0xed, 0x18, 0xbd, 0x05, 0x2a, 0x55, 0xc4, 0x51, 0x92,
	0xf1, 0xe4, 0xb4, 0x08, 0x30, 0x8c, 0x92, 0x0c, 0xad, 0x43, 0xcd, 0x8f, 0xf5, 0x06, 0x45, 0x6b,
	0x7e, 0x8c, 0x10, 0xd4, 0xe9, 0x77, 0x0a, 0x45, 0xe8, 0xba, 0x70, 0x9f, 0xcd, 0x6b, 0xf7, 0xf9,
	0x0e, 0x40, 0x82, 0xe3, 0xc0, 0xf7, 0xdc, 0x0c, 0x4f, 0xf4, 0x16, 0x0d, 0x56, 0x40, 0xd0, 0x26,
	0x28, 0x5e, 0x14, 0x3e, 0xf3, 0xa7, 0xba, 0xba, 0x25, 0x6d, 0xaf, 0x39, 0x5c, 0x42, 0x1b, 0xd0,
	0xc8, 0xa2, 0x33, 0x1c, 0xea, 0x40, 0x0d, 0x32, 0x01, 0xbd, 0x01, 0x8a, 0xe7, 0x1e, 0x7b, 0x49,
	0xa6, 0xb7, 0x19, 0xec, 0xb9, 0xdd, 0x24, 0xe3, 0xf0, 0x19, 0xbe, 0xd4, 0xd7, 0x72, 0xf8, 0x5b,
	0x7c, 0x69, 0xfe, 0x00, 0x40, 0x53, 0xd6, 0xc7, 0xee, 0x1c, 0x57, 0xca, 0x99, 0x78, 0x32, 0xf9,
	0xc6, 0x93, 0xd5, 0xaf, 0x9f, 0xcc, 0x7c, 0x0e, 0x6d, 0xea, 0xdd, 0xc1, 0xb3, 0xe8, 0x15, 0xb8,
	0xff, 0x51, 0xe2, 0xfe, 0xbb, 0x09, 0x76, 0x33, 0xfc, 0x3f, 0x96, 0xcc, 0xe2, 0xea, 0x1a, 0xc2,
	0xd5, 0x99, 0xdf, 0xf1, 0xfa, 0xed, 0xe2, 0x24, 0x7b, 0xa9, 0xc1, 0x98, 0x4f, 0xe0, 0x0e, 0xb5,
	0xbc, 0x97, 0x44, 0xe7, 0xf1, 0x00, 0x5f, 0x54, 0xb2, 0x8e, 0xa0, 0x2e, 0xa4, 0x99, 0xae, 0xcd,
	0xa7, 0xbc, 0x47, 0x52, 0xc3, 0xbb, 0x38, 0xc0, 0x15, 0xd3, 0xb8, 0xcc, 0xb6, 0x2f, 0x06, 0x6d,
	0x4d, 0x26, 0x2f, 0xcb, 0x30, 0xd2, 0x40, 0xf6, 0xe3, 0x54, 0xaf, 0x6f, 0xc9, 0xdb, 0xaa, 0x43,
	0x96, 0x66, 0x20, 0x1e, 0xe3, 0x5f, 0x54, 0xe3, 0x8b, 0x79, 0xfb, 0x49, 0x12, 0xdd, 0x59, 0x69,
	0xea, 0x4f, 0xab, 0xf5, 0xab, 0x0d, 0x68, 0x4c, 0x89, 0x09, 0xee, 0x8f, 0x09, 0xe8, 0x6d, 0x50,
	0xfd, 0x30, 0xc3, 0xc9, 0x33, 0xd7, 0xc3, 0xbc, 0xf2, 0xae, 0x00, 0x1a, 0x62, 0x34, 0xc1, 0xbc,
	0xf2, 0xe8, 0xda, 0xfc, 0x59, 0x02, 0x74, 0x15, 0xd0, 0x38, 0x74, 0x5f, 0x7d, 0x48, 0x98, 0x3f,
	0x4d, 0x4e, 0x19, 0x55, 0x42, 0x31, 0x41, 0x4e, 0xa2, 0x0b, 0x5d, 0xa6, 0x54, 0xac, 0x71, 0x86,
	0xe2, 0xa4, 0x14, 0x5d, 0x38, 0x44, 0x69, 0xfe, 0x21, 0x81, 0xba, 0x80, 0x6e, 0x64, 0x5d, 0xd6,
	0xe5, 0x6b, 0x8b, 0x2e, 0x2f, 0xb0, 0xa5, 0x5c, 0x60, 0x4b, 0x81, 0x1c, 0xeb, 0x95, 0xf9, 0xb9,
	0x51, 0xe6, 0x67, 0xd3, 0x03, 0xa0, 0xf7, 0x73, 0xe8, 0x9e, 0x04, 0xd5, 0xca, 0xf3, 0x5d, 0x31,
	0x23, 0x77, 0x79, 0x58, 0xac, 0xe6, 0xf3, 0x84, 0x4c, 0xa0, 0x95, 0x03, 0x8b, 0x6a, 0x96, 0x84,
	0x6a, 0xce, 0xd3, 0x20, 0xf3, 0x34, 0x6c, 0x40, 0x83, 0xdc, 0x57, 0x4a, 0x8d, 0xaa, 0x0e, 0x13,
	0x48, 0xe7, 0x5d, 0x5c, 0x6f, 0x5e, 0xfa, 0x02, 0x62, 0x3e, 0x87, 0xbb, 0xac, 0xd3, 0x51, 0x26,
	0x1b, 0x5d, 0x86, 0x5e, 0xa5, 0xf3, 0x5c, 0x31, 0xa3, 0x5c, 0x60, 0xc6, 0x7f, 0x6a, 0xfc, 0x4f,
	0x61, 0x8d, 0xba, 0x1f, 0x26, 0xd1, 0x2c, 0xaa, 0xd8, 0xb1, 0x36, 0x41, 0x61, 0x43, 0x5c, 0xde,
	0x6a, 0x99, 0x64, 0x7e, 0xcf, 0x6d, 0x3f, 0x4e, 0xfc, 0x70, 0x6a, 0x0f, 0xab, 0x3e, 0x22, 0x9f,
	0x3e, 0x15, 0xfe, 0x88, 0xa8, 0xb0, 0xa4, 0x91, 0xf8, 0x39, 0x7f, 0xb1, 0x63, 0x57, 0x71, 0xa5,
	0x81, 0x4c, 0x86, 0x02, 0xe6, 0x88, 0x2c, 0x89, 0xf3, 0xb9, 0x1b, 0x9c, 0xe7, 0xef, 0x94, 0x09,
	0xe6, 0x11, 0x1f, 0x14, 0x0e, 0xe9, 0x90, 0x51, 0xf1, 0x50, 0x8c, 0xf3, 0x64, 0x91, 0xf3, 0x7e,
	0x91, 0x38, 0xe9, 0xf5, 0xa3, 0x69, 0x61, 0xb7, 0x54, 0xee, 0xac, 0xa4, 0x47, 0xd4, 0xae, 0x7a,
	0x04, 0x7a, 0x1f, 0x1a, 0x01, 0x9e, 0xe3, 0x80, 0x5a, 0x5c, 0xef, 0x6c, 0xf2, 0x82, 0x5e, 0x98,
	0xdb, 0xe9, 0x13, 0xad, 0xc3, 0x3e, 0x32, 0x3f, 0x81, 0x06, 0x95, 0x51, 0x0b, 0xea, 0xf6, 0xe0,
	0xab, 0x03, 0x36, 0x7c, 0x3e, 0xb1, 0x9c, 0x01, 0x1b, 0x3e, 0x55, 0x68, 0xf4, 0x1c, 0xe7, 0xc0,
	0xd1, 0x6a, 0x64, 0xb9, 0xdb, 0x7b, 0x3c, 0xde, 0xd3, 0xe4, 0xce, 0x5f, 0x0a, 0xc8, 0xdd, 0xbe,
	0x8d, 0x1e, 0x40, 0x9d, 0x8e, 0x95, 0x9a, 0xe8, 0x84, 0x20, 0x46, 0x09, 0x41, 0x1f, 0x10, 0x4f,
	0x64, 0x9e, 0xba, 0x57, 0x88, 0x88, 0x40, 0x46, 0x19, 0x42, 0x1f, 0x81, 0xc2, 0x29, 0x07, 0x89,
	0x4a, 0x86, 0x19, 0x4b, 0x30, 0xb2, 0x83, 0x8f, 0x2c, 0x05, 0x2d, 0xc3, 0x8c, 0x25, 0x18, 0x7a,
	0x0f, 0xe4, 0xc3, 0xfe, 0xa8, 0x18, 0x3d, 0x19, 0x33, 0x8c, 0x12, 0x82, 0x3e, 0x83, 0xd6, 0x00,
	0x5f, 0xd0, 0x26, 0x80, 0x36, 0x44, 0x6d, 0x3e, 0x3c, 0x18, 0x4b, 0x51, 0xf4, 0x25, 0xb4, 0xd9,
	0x00, 0xc0, 0xb6, 0xde, 0x2f, 0x7d, 0xc4, 0xb4, 0xc6, 0x2a, 0x05, 0xfa, 0x9c, 0xf7, 0x37, 0x7b,
	0x48, 0xc8, 0xbe, 0xec, 0xc4, 0x9a, 0x4c, 0x8c, 0xa5, 0x28, 0xb2, 0xe0, 0x0e, 0xdf, 0xc9, 0x13,
	0x54, 0xf6, 0xc1, 0xb3, 0xb9, 0x4a, 0x41, 0xa2, 0x17, 0xd9, 0xb8, 0xfc, 0x1d, 0x53, 0x18, 0xab,
	0x14, 0xa8, 0xc7, 0x63, 0x58, 0xb0, 0xe7, 0x9b, 0xa5, 0x2f, 0x73, 0x95, 0xb1, 0x5a, 0x85, 0x3e,
	0x06, 0x95, 0x02, 0x7d, 0x3f, 0xcd, 0x16, 0xf5, 0x73, 0xd5, 0xf6, 0x8d, 0x32, 0x44, 0xaa, 0x81,
	0xb3, 0x64, 0xe1, 0xe6, 0x19, 0x66, 0x2c, 0xc1, 0xd0, 0x43, 0x68, 0xe6, 0xad, 0xef, 0x75, 0x51,
	0xcd, 0x41, 0x63, 0x19, 0x48, 0x8b, 0x8e, 0xf5, 0x99, 0x62, 0x81, 0x51, 0xcc, 0x58, 0x82, 0x91,
	0x77, 0xc0, 0xda, 0x45, 0xa1, 0xe8, 0x29, 0x64, 0x94, 0xa1, 0xce, 0xaf, 0x75, 0x50, 0x46, 0x38,
	0x99, 0xe3, 0x84, 0xdc, 0x86, 0xf8, 0xaf, 0xbb, 0x90, 0x74, 0x41, 0x61, 0xac, 0x52, 0xdc, 0xea,
	0xb9, 0x7e, 0x01, 0x20, 0xf0, 0xd0, 0x66, 0xf9, 0x20, 0x04, 0x37, 0x56, 0xe0, 0xff, 0xfd, 0x63,
	0xaf, 0x74, 0x59, 0x8f, 0xa0, 0xbd, 0xef, 0x9e, 0xe1, 0x21, 0xa9, 0xaa, 0xf9, 0x6d, 0x36, 0x7e,
	0x0a, 0x2a, 0x65, 0xae, 0x71, 0x6c, 0x0f, 0x8b, 0xdb, 0x38, 0xa1, 0x19, 0xcb, 0x40, 0xe2, 0x8f,
	0x2e, 0x77, 0xa3, 0x8b, 0xf0, 0x56, 0x1b, 0x1f, 0x40, 0x9d, 0x76, 0x7e, 0xed, 0x7a, 0xf3, 0x36,
	0x4a, 0xc8, 0x89, 0x42, 0x81, 0x87, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x12, 0x0a, 0x81,
	0xb3, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CLIClient is the client API for CLI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CLIClient interface {
	// Join Cluster
	Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error)
	// Leave Cluster
	Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error)
	// Remove from cluster
	Remove(ctx context.Context, in *PulseRemove, opts ...grpc.CallOption) (*PulseRemove, error)
	// Create Cluster
	Create(ctx context.Context, in *PulseCreate, opts ...grpc.CallOption) (*PulseCreate, error)
	// Create Certs
	TLS(ctx context.Context, in *PulseCert, opts ...grpc.CallOption) (*PulseCert, error)
	// Create floating ip group
	NewGroup(ctx context.Context, in *PulseGroupNew, opts ...grpc.CallOption) (*PulseGroupNew, error)
	// Delete floating ip group
	DeleteGroup(ctx context.Context, in *PulseGroupDelete, opts ...grpc.CallOption) (*PulseGroupDelete, error)
	// Add floating IP
	GroupIPAdd(ctx context.Context, in *PulseGroupAdd, opts ...grpc.CallOption) (*PulseGroupAdd, error)
	// Remove floating IP
	GroupIPRemove(ctx context.Context, in *PulseGroupRemove, opts ...grpc.CallOption) (*PulseGroupRemove, error)
	// Assign a group
	GroupAssign(ctx context.Context, in *PulseGroupAssign, opts ...grpc.CallOption) (*PulseGroupAssign, error)
	// Unassign a group
	GroupUnassign(ctx context.Context, in *PulseGroupUnassign, opts ...grpc.CallOption) (*PulseGroupUnassign, error)
	// Get group list
	GroupList(ctx context.Context, in *GroupTable, opts ...grpc.CallOption) (*GroupTable, error)
	// Pulse Status
	Status(ctx context.Context, in *PulseStatus, opts ...grpc.CallOption) (*PulseStatus, error)
	// Promote a member
	Promote(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error)
	// Promote a member
	Config(ctx context.Context, in *PulseConfig, opts ...grpc.CallOption) (*PulseConfig, error)
	// Generate new cluster token
	Token(ctx context.Context, in *PulseToken, opts ...grpc.CallOption) (*PulseToken, error)
}

type cLIClient struct {
	cc *grpc.ClientConn
}

func NewCLIClient(cc *grpc.ClientConn) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error) {
	out := new(PulseJoin)
	err := c.cc.Invoke(ctx, "/proto.CLI/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error) {
	out := new(PulseLeave)
	err := c.cc.Invoke(ctx, "/proto.CLI/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Remove(ctx context.Context, in *PulseRemove, opts ...grpc.CallOption) (*PulseRemove, error) {
	out := new(PulseRemove)
	err := c.cc.Invoke(ctx, "/proto.CLI/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Create(ctx context.Context, in *PulseCreate, opts ...grpc.CallOption) (*PulseCreate, error) {
	out := new(PulseCreate)
	err := c.cc.Invoke(ctx, "/proto.CLI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) TLS(ctx context.Context, in *PulseCert, opts ...grpc.CallOption) (*PulseCert, error) {
	out := new(PulseCert)
	err := c.cc.Invoke(ctx, "/proto.CLI/TLS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) NewGroup(ctx context.Context, in *PulseGroupNew, opts ...grpc.CallOption) (*PulseGroupNew, error) {
	out := new(PulseGroupNew)
	err := c.cc.Invoke(ctx, "/proto.CLI/NewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) DeleteGroup(ctx context.Context, in *PulseGroupDelete, opts ...grpc.CallOption) (*PulseGroupDelete, error) {
	out := new(PulseGroupDelete)
	err := c.cc.Invoke(ctx, "/proto.CLI/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupIPAdd(ctx context.Context, in *PulseGroupAdd, opts ...grpc.CallOption) (*PulseGroupAdd, error) {
	out := new(PulseGroupAdd)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupIPAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupIPRemove(ctx context.Context, in *PulseGroupRemove, opts ...grpc.CallOption) (*PulseGroupRemove, error) {
	out := new(PulseGroupRemove)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupIPRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupAssign(ctx context.Context, in *PulseGroupAssign, opts ...grpc.CallOption) (*PulseGroupAssign, error) {
	out := new(PulseGroupAssign)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupAssign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupUnassign(ctx context.Context, in *PulseGroupUnassign, opts ...grpc.CallOption) (*PulseGroupUnassign, error) {
	out := new(PulseGroupUnassign)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupUnassign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupList(ctx context.Context, in *GroupTable, opts ...grpc.CallOption) (*GroupTable, error) {
	out := new(GroupTable)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Status(ctx context.Context, in *PulseStatus, opts ...grpc.CallOption) (*PulseStatus, error) {
	out := new(PulseStatus)
	err := c.cc.Invoke(ctx, "/proto.CLI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Promote(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error) {
	out := new(PulsePromote)
	err := c.cc.Invoke(ctx, "/proto.CLI/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Config(ctx context.Context, in *PulseConfig, opts ...grpc.CallOption) (*PulseConfig, error) {
	out := new(PulseConfig)
	err := c.cc.Invoke(ctx, "/proto.CLI/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Token(ctx context.Context, in *PulseToken, opts ...grpc.CallOption) (*PulseToken, error) {
	out := new(PulseToken)
	err := c.cc.Invoke(ctx, "/proto.CLI/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIServer is the server API for CLI service.
type CLIServer interface {
	// Join Cluster
	Join(context.Context, *PulseJoin) (*PulseJoin, error)
	// Leave Cluster
	Leave(context.Context, *PulseLeave) (*PulseLeave, error)
	// Remove from cluster
	Remove(context.Context, *PulseRemove) (*PulseRemove, error)
	// Create Cluster
	Create(context.Context, *PulseCreate) (*PulseCreate, error)
	// Create Certs
	TLS(context.Context, *PulseCert) (*PulseCert, error)
	// Create floating ip group
	NewGroup(context.Context, *PulseGroupNew) (*PulseGroupNew, error)
	// Delete floating ip group
	DeleteGroup(context.Context, *PulseGroupDelete) (*PulseGroupDelete, error)
	// Add floating IP
	GroupIPAdd(context.Context, *PulseGroupAdd) (*PulseGroupAdd, error)
	// Remove floating IP
	GroupIPRemove(context.Context, *PulseGroupRemove) (*PulseGroupRemove, error)
	// Assign a group
	GroupAssign(context.Context, *PulseGroupAssign) (*PulseGroupAssign, error)
	// Unassign a group
	GroupUnassign(context.Context, *PulseGroupUnassign) (*PulseGroupUnassign, error)
	// Get group list
	GroupList(context.Context, *GroupTable) (*GroupTable, error)
	// Pulse Status
	Status(context.Context, *PulseStatus) (*PulseStatus, error)
	// Promote a member
	Promote(context.Context, *PulsePromote) (*PulsePromote, error)
	// Promote a member
	Config(context.Context, *PulseConfig) (*PulseConfig, error)
	// Generate new cluster token
	Token(context.Context, *PulseToken) (*PulseToken, error)
}

// UnimplementedCLIServer can be embedded to have forward compatible implementations.
type UnimplementedCLIServer struct {
}

func (*UnimplementedCLIServer) Join(ctx context.Context, req *PulseJoin) (*PulseJoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedCLIServer) Leave(ctx context.Context, req *PulseLeave) (*PulseLeave, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedCLIServer) Remove(ctx context.Context, req *PulseRemove) (*PulseRemove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedCLIServer) Create(ctx context.Context, req *PulseCreate) (*PulseCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCLIServer) TLS(ctx context.Context, req *PulseCert) (*PulseCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TLS not implemented")
}
func (*UnimplementedCLIServer) NewGroup(ctx context.Context, req *PulseGroupNew) (*PulseGroupNew, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGroup not implemented")
}
func (*UnimplementedCLIServer) DeleteGroup(ctx context.Context, req *PulseGroupDelete) (*PulseGroupDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedCLIServer) GroupIPAdd(ctx context.Context, req *PulseGroupAdd) (*PulseGroupAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupIPAdd not implemented")
}
func (*UnimplementedCLIServer) GroupIPRemove(ctx context.Context, req *PulseGroupRemove) (*PulseGroupRemove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupIPRemove not implemented")
}
func (*UnimplementedCLIServer) GroupAssign(ctx context.Context, req *PulseGroupAssign) (*PulseGroupAssign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAssign not implemented")
}
func (*UnimplementedCLIServer) GroupUnassign(ctx context.Context, req *PulseGroupUnassign) (*PulseGroupUnassign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUnassign not implemented")
}
func (*UnimplementedCLIServer) GroupList(ctx context.Context, req *GroupTable) (*GroupTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (*UnimplementedCLIServer) Status(ctx context.Context, req *PulseStatus) (*PulseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedCLIServer) Promote(ctx context.Context, req *PulsePromote) (*PulsePromote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (*UnimplementedCLIServer) Config(ctx context.Context, req *PulseConfig) (*PulseConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedCLIServer) Token(ctx context.Context, req *PulseToken) (*PulseToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}

func RegisterCLIServer(s *grpc.Server, srv CLIServer) {
	s.RegisterService(&_CLI_serviceDesc, srv)
}

func _CLI_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Join(ctx, req.(*PulseJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Leave(ctx, req.(*PulseLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Remove(ctx, req.(*PulseRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Create(ctx, req.(*PulseCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_TLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseCert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).TLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/TLS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).TLS(ctx, req.(*PulseCert))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_NewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).NewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/NewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).NewGroup(ctx, req.(*PulseGroupNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).DeleteGroup(ctx, req.(*PulseGroupDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupIPAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupIPAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupIPAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupIPAdd(ctx, req.(*PulseGroupAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupIPRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupIPRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupIPRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupIPRemove(ctx, req.(*PulseGroupRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupAssign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupAssign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupAssign(ctx, req.(*PulseGroupAssign))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupUnassign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupUnassign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupUnassign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupUnassign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupUnassign(ctx, req.(*PulseGroupUnassign))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupList(ctx, req.(*GroupTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Status(ctx, req.(*PulseStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulsePromote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Promote(ctx, req.(*PulsePromote))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Config(ctx, req.(*PulseConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Token(ctx, req.(*PulseToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _CLI_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _CLI_Leave_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CLI_Remove_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CLI_Create_Handler,
		},
		{
			MethodName: "TLS",
			Handler:    _CLI_TLS_Handler,
		},
		{
			MethodName: "NewGroup",
			Handler:    _CLI_NewGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _CLI_DeleteGroup_Handler,
		},
		{
			MethodName: "GroupIPAdd",
			Handler:    _CLI_GroupIPAdd_Handler,
		},
		{
			MethodName: "GroupIPRemove",
			Handler:    _CLI_GroupIPRemove_Handler,
		},
		{
			MethodName: "GroupAssign",
			Handler:    _CLI_GroupAssign_Handler,
		},
		{
			MethodName: "GroupUnassign",
			Handler:    _CLI_GroupUnassign_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _CLI_GroupList_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CLI_Status_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _CLI_Promote_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _CLI_Config_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _CLI_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pulse.proto",
}

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	// Perform GRPC Health Check
	HealthCheck(ctx context.Context, in *PulseHealthCheck, opts ...grpc.CallOption) (*PulseHealthCheck, error)
	// Join Cluster
	Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error)
	// Sync Config
	ConfigSync(ctx context.Context, in *PulseConfigSync, opts ...grpc.CallOption) (*PulseConfigSync, error)
	// Leave Cluster
	Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error)
	// Remove from Cluster
	Remove(ctx context.Context, in *PulseRemove, opts ...grpc.CallOption) (*PulseRemove, error)
	// Promote
	Promote(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error)
	// demote
	MakePassive(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error)
	// Bring up IP
	BringUpIP(ctx context.Context, in *PulseBringIP, opts ...grpc.CallOption) (*PulseBringIP, error)
	// Bring down IP
	BringDownIP(ctx context.Context, in *PulseBringIP, opts ...grpc.CallOption) (*PulseBringIP, error)
	// Bring down IP
	Logs(ctx context.Context, in *PulseLogs, opts ...grpc.CallOption) (*PulseLogs, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) HealthCheck(ctx context.Context, in *PulseHealthCheck, opts ...grpc.CallOption) (*PulseHealthCheck, error) {
	out := new(PulseHealthCheck)
	err := c.cc.Invoke(ctx, "/proto.Server/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error) {
	out := new(PulseJoin)
	err := c.cc.Invoke(ctx, "/proto.Server/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ConfigSync(ctx context.Context, in *PulseConfigSync, opts ...grpc.CallOption) (*PulseConfigSync, error) {
	out := new(PulseConfigSync)
	err := c.cc.Invoke(ctx, "/proto.Server/ConfigSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error) {
	out := new(PulseLeave)
	err := c.cc.Invoke(ctx, "/proto.Server/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Remove(ctx context.Context, in *PulseRemove, opts ...grpc.CallOption) (*PulseRemove, error) {
	out := new(PulseRemove)
	err := c.cc.Invoke(ctx, "/proto.Server/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Promote(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error) {
	out := new(PulsePromote)
	err := c.cc.Invoke(ctx, "/proto.Server/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) MakePassive(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error) {
	out := new(PulsePromote)
	err := c.cc.Invoke(ctx, "/proto.Server/MakePassive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BringUpIP(ctx context.Context, in *PulseBringIP, opts ...grpc.CallOption) (*PulseBringIP, error) {
	out := new(PulseBringIP)
	err := c.cc.Invoke(ctx, "/proto.Server/BringUpIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BringDownIP(ctx context.Context, in *PulseBringIP, opts ...grpc.CallOption) (*PulseBringIP, error) {
	out := new(PulseBringIP)
	err := c.cc.Invoke(ctx, "/proto.Server/BringDownIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Logs(ctx context.Context, in *PulseLogs, opts ...grpc.CallOption) (*PulseLogs, error) {
	out := new(PulseLogs)
	err := c.cc.Invoke(ctx, "/proto.Server/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	// Perform GRPC Health Check
	HealthCheck(context.Context, *PulseHealthCheck) (*PulseHealthCheck, error)
	// Join Cluster
	Join(context.Context, *PulseJoin) (*PulseJoin, error)
	// Sync Config
	ConfigSync(context.Context, *PulseConfigSync) (*PulseConfigSync, error)
	// Leave Cluster
	Leave(context.Context, *PulseLeave) (*PulseLeave, error)
	// Remove from Cluster
	Remove(context.Context, *PulseRemove) (*PulseRemove, error)
	// Promote
	Promote(context.Context, *PulsePromote) (*PulsePromote, error)
	// demote
	MakePassive(context.Context, *PulsePromote) (*PulsePromote, error)
	// Bring up IP
	BringUpIP(context.Context, *PulseBringIP) (*PulseBringIP, error)
	// Bring down IP
	BringDownIP(context.Context, *PulseBringIP) (*PulseBringIP, error)
	// Bring down IP
	Logs(context.Context, *PulseLogs) (*PulseLogs, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) HealthCheck(ctx context.Context, req *PulseHealthCheck) (*PulseHealthCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedServerServer) Join(ctx context.Context, req *PulseJoin) (*PulseJoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedServerServer) ConfigSync(ctx context.Context, req *PulseConfigSync) (*PulseConfigSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSync not implemented")
}
func (*UnimplementedServerServer) Leave(ctx context.Context, req *PulseLeave) (*PulseLeave, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedServerServer) Remove(ctx context.Context, req *PulseRemove) (*PulseRemove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedServerServer) Promote(ctx context.Context, req *PulsePromote) (*PulsePromote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (*UnimplementedServerServer) MakePassive(ctx context.Context, req *PulsePromote) (*PulsePromote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePassive not implemented")
}
func (*UnimplementedServerServer) BringUpIP(ctx context.Context, req *PulseBringIP) (*PulseBringIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringUpIP not implemented")
}
func (*UnimplementedServerServer) BringDownIP(ctx context.Context, req *PulseBringIP) (*PulseBringIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringDownIP not implemented")
}
func (*UnimplementedServerServer) Logs(ctx context.Context, req *PulseLogs) (*PulseLogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseHealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).HealthCheck(ctx, req.(*PulseHealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Join(ctx, req.(*PulseJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ConfigSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseConfigSync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ConfigSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/ConfigSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ConfigSync(ctx, req.(*PulseConfigSync))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Leave(ctx, req.(*PulseLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Remove(ctx, req.(*PulseRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulsePromote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Promote(ctx, req.(*PulsePromote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_MakePassive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulsePromote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).MakePassive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/MakePassive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).MakePassive(ctx, req.(*PulsePromote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BringUpIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseBringIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BringUpIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/BringUpIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BringUpIP(ctx, req.(*PulseBringIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BringDownIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseBringIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BringDownIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/BringDownIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BringDownIP(ctx, req.(*PulseBringIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseLogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Logs(ctx, req.(*PulseLogs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Server_HealthCheck_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Server_Join_Handler,
		},
		{
			MethodName: "ConfigSync",
			Handler:    _Server_ConfigSync_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Server_Leave_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Server_Remove_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _Server_Promote_Handler,
		},
		{
			MethodName: "MakePassive",
			Handler:    _Server_MakePassive_Handler,
		},
		{
			MethodName: "BringUpIP",
			Handler:    _Server_BringUpIP_Handler,
		},
		{
			MethodName: "BringDownIP",
			Handler:    _Server_BringDownIP_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _Server_Logs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pulse.proto",
}
