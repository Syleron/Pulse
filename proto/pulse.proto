/*
    PulseHA - HA Cluster Daemon
    Copyright (C) 2017  Andrew Zak <andrew@pulseha.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto3";

package proto;

// Types
message HealthCheckRequest {
    enum ServingRequest {
        SETUP = 0;
        STATUS = 1;
    }
    ServingRequest request = 1;
}
message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        UNCONFIGURED = 1;
        CONFIGURED = 2;
        FAILVER = 3;
        HEALTHY = 4;
    }
    ServingStatus status = 1;
}

message MemberStatus {
    enum Status {
        ACTIVE = 0;
        LEAVING = 1;
        PASSIVE = 2;
        UNAVAILABLE = 3;
    }
    Status status = 1;
}

// Pulse Cluster Messages
message PulseJoin {
    bool success = 1;
    string message = 2;
    string bind_ip = 3;
    string bind_port = 4;
    string ip = 5;
    string port = 6;
    string hostname = 7;
    bool replicated = 8;
    bytes config = 9;
}
message PulseLeave {
    bool success = 1;
    string message = 2;
    string hostname = 3;
    bool replicated = 4;
}
message PulseCreate {
    bool success = 1;
    string message = 2;
    string bind_ip = 3;
    string bind_port = 4;
}
// Pulse Group Messages
message PulseGroupNew {
    bool success = 1;
    string message = 2;
}
message PulseGroupDelete {
    bool success = 1;
    string message = 2;
    string name = 3;
}
message PulseGroupAdd {
    bool success = 1;
    string message = 2;
    string name = 3;
    repeated string ips = 4;
}
message PulseGroupRemove {
    bool success = 1;
    string message = 2;
    string name = 3;
    repeated string ips = 4;
}
message PulseGroupAssign {
    bool success = 1;
    string message = 2;
    string group = 3;
    string interface = 4;
    string node = 5;
}
message PulseGroupUnassign {
    bool success = 1;
    string message = 2;
    string group = 3;
    string interface = 4;
    string node = 5;
}
message PulseGroupList {
    bool success = 1;
    string message = 2;
    map<string, Group> groups = 3;
};
message Group {
    repeated string ips = 1;
    map<string, Interfaces> nodeInterface = 2;
}
message Interfaces {
    repeated string interfaces = 1;
}

message GroupRow {
    string name = 1;
    repeated string ip = 2;
    repeated string nodes = 3;
    repeated string interfaces = 4;
}

message GroupTable {
    bool success = 1;
    string message = 2;
    repeated GroupRow row = 3;
}

message PulseConfigSync {
    bool success = 1;
    string message = 2;
    bytes config = 3;
    bool replicated = 4;
}


// Services
service CLI {
    // Join Cluster
    rpc Join (PulseJoin) returns (PulseJoin);
    // Leave Cluster
    rpc Leave (PulseLeave) returns (PulseLeave);
    // Create Cluster
    rpc Create (PulseCreate) returns (PulseCreate);
    // Create floating ip group
    rpc NewGroup (PulseGroupNew) returns (PulseGroupNew);
    // Delete floating ip group
    rpc DeleteGroup (PulseGroupDelete) returns (PulseGroupDelete);
    // Add floating IP
    rpc GroupIPAdd (PulseGroupAdd) returns (PulseGroupAdd);
    // Remove floating IP
    rpc GroupIPRemove (PulseGroupRemove) returns (PulseGroupRemove);
    // Assign a group
    rpc GroupAssign (PulseGroupAssign) returns (PulseGroupAssign);
    // Unassign a group
    rpc GroupUnassign (PulseGroupUnassign) returns (PulseGroupUnassign);
    // Get group list
    rpc GroupList (GroupTable) returns (GroupTable);
}

service Server {
    // Perform GRPC Health Check
    rpc Check (HealthCheckRequest) returns (HealthCheckResponse);
    // Join Cluster
    rpc Join (PulseJoin) returns (PulseJoin);
    // Sync Config
    rpc ConfigSync(PulseConfigSync) returns (PulseConfigSync);
    // Leave Cluster
    rpc Leave (PulseLeave) returns (PulseLeave);
}
