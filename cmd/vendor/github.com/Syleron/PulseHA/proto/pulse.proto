syntax = "proto3";

package proto;

// Statuses
// Alive
// Leaving
// Left
// Failed

// Types
message HealthCheckRequest {
    enum ServingRequest {
        SETUP = 0;
        STATUS = 1;
    }
    ServingRequest request = 1;
}
message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        UNCONFIGURED = 1;
        CONFIGURED = 2;
        FAILVER = 3;
        HEALTHY = 4;
    }
    ServingStatus status = 1;
}

// Pulse Cluster Messages
message PulseJoin {
    bool success = 1;
    string address = 2;
    string message = 3;

}
message PulseLeave {
    bool success = 1;
    string message = 2;
}
message PulseCreate {
    bool success = 1;
    string message = 2;
    string bind_ip = 3;
    string bind_port = 4;
}
// Pulse Group Messages
message PulseGroupNew {
    bool success = 1;
    string message = 2;
}
message PulseGroupDelete {
    bool success = 1;
    string message = 2;
    string name = 3;
}
message PulseGroupAdd {
    bool success = 1;
    string message = 2;
    string name = 3;
    repeated string ips = 4;
}
message PulseGroupRemove {
    bool success = 1;
    string message = 2;
    string name = 3;
    repeated string ips = 4;
}
message PulseGroupAssign {
    bool success = 1;
    string message = 2;
    string group = 3;
    string interface = 4;
    string node = 5;
}
message PulseGroupUnassign {
    bool success = 1;
    string message = 2;
    string group = 3;
    string interface = 4;
    string node = 5;
}
message PulseGroupList {
    bool success = 1;
    string message = 2;
    map<string, Group> groups = 3;
};
message Group {
    repeated string ips = 1;
    map<string, Interfaces> nodeInterface = 2;
}
message Interfaces {
    repeated string interfaces = 1;
}

// Services
service Requester {
    // Perform GRPC Health Check
    rpc Check (HealthCheckRequest) returns (HealthCheckResponse);
    // Join Cluster
    rpc Join (PulseJoin) returns (PulseJoin);
    // Leave Cluster
    rpc Leave (PulseLeave) returns (PulseLeave);
    // Create Cluster
    rpc Create (PulseCreate) returns (PulseCreate);
    // Create floating ip group
    rpc NewGroup (PulseGroupNew) returns (PulseGroupNew);
    // Delete floating ip group
    rpc DeleteGroup (PulseGroupDelete) returns (PulseGroupDelete);
    // Add floating IP
    rpc GroupIPAdd (PulseGroupAdd) returns (PulseGroupAdd);
    // Remove floating IP
    rpc GroupIPRemove (PulseGroupRemove) returns (PulseGroupRemove);
    // Assign a group
    rpc GroupAssign (PulseGroupAssign) returns (PulseGroupAssign);
    // Unassign a group
    rpc GroupUnassign (PulseGroupUnassign) returns (PulseGroupUnassign);
    // Get group list
    rpc GroupList (PulseGroupList) returns (PulseGroupList);
}
