// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/pulse.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/pulse.proto

It has these top-level messages:
	HealthCheckRequest
	HealthCheckResponse
	MemberStatus
	PulseJoin
	PulseLeave
	PulseCreate
	PulseGroupNew
	PulseGroupDelete
	PulseGroupAdd
	PulseGroupRemove
	PulseGroupAssign
	PulseGroupUnassign
	PulseGroupList
	Group
	Interfaces
	GroupRow
	GroupTable
	PulseConfigSync
	PulsePromote
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthCheckRequest_ServingRequest int32

const (
	HealthCheckRequest_SETUP  HealthCheckRequest_ServingRequest = 0
	HealthCheckRequest_STATUS HealthCheckRequest_ServingRequest = 1
)

var HealthCheckRequest_ServingRequest_name = map[int32]string{
	0: "SETUP",
	1: "STATUS",
}
var HealthCheckRequest_ServingRequest_value = map[string]int32{
	"SETUP":  0,
	"STATUS": 1,
}

func (x HealthCheckRequest_ServingRequest) String() string {
	return proto1.EnumName(HealthCheckRequest_ServingRequest_name, int32(x))
}
func (HealthCheckRequest_ServingRequest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN      HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_UNCONFIGURED HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_CONFIGURED   HealthCheckResponse_ServingStatus = 2
	HealthCheckResponse_FAILVER      HealthCheckResponse_ServingStatus = 3
	HealthCheckResponse_HEALTHY      HealthCheckResponse_ServingStatus = 4
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNCONFIGURED",
	2: "CONFIGURED",
	3: "FAILVER",
	4: "HEALTHY",
}
var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":      0,
	"UNCONFIGURED": 1,
	"CONFIGURED":   2,
	"FAILVER":      3,
	"HEALTHY":      4,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto1.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type MemberStatus_Status int32

const (
	MemberStatus_ACTIVE      MemberStatus_Status = 0
	MemberStatus_LEAVING     MemberStatus_Status = 1
	MemberStatus_PASSIVE     MemberStatus_Status = 2
	MemberStatus_UNAVAILABLE MemberStatus_Status = 3
)

var MemberStatus_Status_name = map[int32]string{
	0: "ACTIVE",
	1: "LEAVING",
	2: "PASSIVE",
	3: "UNAVAILABLE",
}
var MemberStatus_Status_value = map[string]int32{
	"ACTIVE":      0,
	"LEAVING":     1,
	"PASSIVE":     2,
	"UNAVAILABLE": 3,
}

func (x MemberStatus_Status) String() string {
	return proto1.EnumName(MemberStatus_Status_name, int32(x))
}
func (MemberStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Types
type HealthCheckRequest struct {
	Request HealthCheckRequest_ServingRequest `protobuf:"varint,1,opt,name=request,enum=proto.HealthCheckRequest_ServingRequest" json:"request,omitempty"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto1.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HealthCheckRequest) GetRequest() HealthCheckRequest_ServingRequest {
	if m != nil {
		return m.Request
	}
	return HealthCheckRequest_SETUP
}

type HealthCheckResponse struct {
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,enum=proto.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto1.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_UNKNOWN
}

type MemberStatus struct {
	Status MemberStatus_Status `protobuf:"varint,1,opt,name=status,enum=proto.MemberStatus_Status" json:"status,omitempty"`
}

func (m *MemberStatus) Reset()                    { *m = MemberStatus{} }
func (m *MemberStatus) String() string            { return proto1.CompactTextString(m) }
func (*MemberStatus) ProtoMessage()               {}
func (*MemberStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MemberStatus) GetStatus() MemberStatus_Status {
	if m != nil {
		return m.Status
	}
	return MemberStatus_ACTIVE
}

// Pulse Cluster Messages
type PulseJoin struct {
	Success    bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	BindIp     string `protobuf:"bytes,3,opt,name=bind_ip,json=bindIp" json:"bind_ip,omitempty"`
	BindPort   string `protobuf:"bytes,4,opt,name=bind_port,json=bindPort" json:"bind_port,omitempty"`
	Ip         string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,6,opt,name=port" json:"port,omitempty"`
	Hostname   string `protobuf:"bytes,7,opt,name=hostname" json:"hostname,omitempty"`
	Replicated bool   `protobuf:"varint,8,opt,name=replicated" json:"replicated,omitempty"`
	Config     []byte `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *PulseJoin) Reset()                    { *m = PulseJoin{} }
func (m *PulseJoin) String() string            { return proto1.CompactTextString(m) }
func (*PulseJoin) ProtoMessage()               {}
func (*PulseJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PulseJoin) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseJoin) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseJoin) GetBindIp() string {
	if m != nil {
		return m.BindIp
	}
	return ""
}

func (m *PulseJoin) GetBindPort() string {
	if m != nil {
		return m.BindPort
	}
	return ""
}

func (m *PulseJoin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PulseJoin) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PulseJoin) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PulseJoin) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

func (m *PulseJoin) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type PulseLeave struct {
	Success    bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Hostname   string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Replicated bool   `protobuf:"varint,4,opt,name=replicated" json:"replicated,omitempty"`
}

func (m *PulseLeave) Reset()                    { *m = PulseLeave{} }
func (m *PulseLeave) String() string            { return proto1.CompactTextString(m) }
func (*PulseLeave) ProtoMessage()               {}
func (*PulseLeave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PulseLeave) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseLeave) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseLeave) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PulseLeave) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

type PulseCreate struct {
	Success  bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	BindIp   string `protobuf:"bytes,3,opt,name=bind_ip,json=bindIp" json:"bind_ip,omitempty"`
	BindPort string `protobuf:"bytes,4,opt,name=bind_port,json=bindPort" json:"bind_port,omitempty"`
}

func (m *PulseCreate) Reset()                    { *m = PulseCreate{} }
func (m *PulseCreate) String() string            { return proto1.CompactTextString(m) }
func (*PulseCreate) ProtoMessage()               {}
func (*PulseCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PulseCreate) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseCreate) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseCreate) GetBindIp() string {
	if m != nil {
		return m.BindIp
	}
	return ""
}

func (m *PulseCreate) GetBindPort() string {
	if m != nil {
		return m.BindPort
	}
	return ""
}

// Pulse Group Messages
type PulseGroupNew struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *PulseGroupNew) Reset()                    { *m = PulseGroupNew{} }
func (m *PulseGroupNew) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupNew) ProtoMessage()               {}
func (*PulseGroupNew) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PulseGroupNew) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupNew) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PulseGroupDelete struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *PulseGroupDelete) Reset()                    { *m = PulseGroupDelete{} }
func (m *PulseGroupDelete) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupDelete) ProtoMessage()               {}
func (*PulseGroupDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PulseGroupDelete) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupDelete) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PulseGroupAdd struct {
	Success bool     `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Name    string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Ips     []string `protobuf:"bytes,4,rep,name=ips" json:"ips,omitempty"`
}

func (m *PulseGroupAdd) Reset()                    { *m = PulseGroupAdd{} }
func (m *PulseGroupAdd) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupAdd) ProtoMessage()               {}
func (*PulseGroupAdd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PulseGroupAdd) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupAdd) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupAdd) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PulseGroupAdd) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

type PulseGroupRemove struct {
	Success bool     `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Name    string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Ips     []string `protobuf:"bytes,4,rep,name=ips" json:"ips,omitempty"`
}

func (m *PulseGroupRemove) Reset()                    { *m = PulseGroupRemove{} }
func (m *PulseGroupRemove) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupRemove) ProtoMessage()               {}
func (*PulseGroupRemove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PulseGroupRemove) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupRemove) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupRemove) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PulseGroupRemove) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

type PulseGroupAssign struct {
	Success   bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Group     string `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Interface string `protobuf:"bytes,4,opt,name=interface" json:"interface,omitempty"`
	Node      string `protobuf:"bytes,5,opt,name=node" json:"node,omitempty"`
}

func (m *PulseGroupAssign) Reset()                    { *m = PulseGroupAssign{} }
func (m *PulseGroupAssign) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupAssign) ProtoMessage()               {}
func (*PulseGroupAssign) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PulseGroupAssign) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupAssign) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupAssign) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PulseGroupAssign) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *PulseGroupAssign) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type PulseGroupUnassign struct {
	Success   bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Group     string `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Interface string `protobuf:"bytes,4,opt,name=interface" json:"interface,omitempty"`
	Node      string `protobuf:"bytes,5,opt,name=node" json:"node,omitempty"`
}

func (m *PulseGroupUnassign) Reset()                    { *m = PulseGroupUnassign{} }
func (m *PulseGroupUnassign) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupUnassign) ProtoMessage()               {}
func (*PulseGroupUnassign) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PulseGroupUnassign) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupUnassign) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupUnassign) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PulseGroupUnassign) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *PulseGroupUnassign) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type PulseGroupList struct {
	Success bool              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Groups  map[string]*Group `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PulseGroupList) Reset()                    { *m = PulseGroupList{} }
func (m *PulseGroupList) String() string            { return proto1.CompactTextString(m) }
func (*PulseGroupList) ProtoMessage()               {}
func (*PulseGroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PulseGroupList) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseGroupList) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseGroupList) GetGroups() map[string]*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Group struct {
	Ips           []string               `protobuf:"bytes,1,rep,name=ips" json:"ips,omitempty"`
	NodeInterface map[string]*Interfaces `protobuf:"bytes,2,rep,name=nodeInterface" json:"nodeInterface,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto1.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Group) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *Group) GetNodeInterface() map[string]*Interfaces {
	if m != nil {
		return m.NodeInterface
	}
	return nil
}

type Interfaces struct {
	Interfaces []string `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *Interfaces) Reset()                    { *m = Interfaces{} }
func (m *Interfaces) String() string            { return proto1.CompactTextString(m) }
func (*Interfaces) ProtoMessage()               {}
func (*Interfaces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Interfaces) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type GroupRow struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip         []string `protobuf:"bytes,2,rep,name=ip" json:"ip,omitempty"`
	Nodes      []string `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	Interfaces []string `protobuf:"bytes,4,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *GroupRow) Reset()                    { *m = GroupRow{} }
func (m *GroupRow) String() string            { return proto1.CompactTextString(m) }
func (*GroupRow) ProtoMessage()               {}
func (*GroupRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GroupRow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupRow) GetIp() []string {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *GroupRow) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *GroupRow) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type GroupTable struct {
	Success bool        `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Row     []*GroupRow `protobuf:"bytes,3,rep,name=row" json:"row,omitempty"`
}

func (m *GroupTable) Reset()                    { *m = GroupTable{} }
func (m *GroupTable) String() string            { return proto1.CompactTextString(m) }
func (*GroupTable) ProtoMessage()               {}
func (*GroupTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GroupTable) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GroupTable) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GroupTable) GetRow() []*GroupRow {
	if m != nil {
		return m.Row
	}
	return nil
}

type PulseConfigSync struct {
	Success    bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Config     []byte `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Replicated bool   `protobuf:"varint,4,opt,name=replicated" json:"replicated,omitempty"`
}

func (m *PulseConfigSync) Reset()                    { *m = PulseConfigSync{} }
func (m *PulseConfigSync) String() string            { return proto1.CompactTextString(m) }
func (*PulseConfigSync) ProtoMessage()               {}
func (*PulseConfigSync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PulseConfigSync) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulseConfigSync) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulseConfigSync) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *PulseConfigSync) GetReplicated() bool {
	if m != nil {
		return m.Replicated
	}
	return false
}

type PulsePromote struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Member  string `protobuf:"bytes,3,opt,name=member" json:"member,omitempty"`
}

func (m *PulsePromote) Reset()                    { *m = PulsePromote{} }
func (m *PulsePromote) String() string            { return proto1.CompactTextString(m) }
func (*PulsePromote) ProtoMessage()               {}
func (*PulsePromote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PulsePromote) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PulsePromote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PulsePromote) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func init() {
	proto1.RegisterType((*HealthCheckRequest)(nil), "proto.HealthCheckRequest")
	proto1.RegisterType((*HealthCheckResponse)(nil), "proto.HealthCheckResponse")
	proto1.RegisterType((*MemberStatus)(nil), "proto.MemberStatus")
	proto1.RegisterType((*PulseJoin)(nil), "proto.PulseJoin")
	proto1.RegisterType((*PulseLeave)(nil), "proto.PulseLeave")
	proto1.RegisterType((*PulseCreate)(nil), "proto.PulseCreate")
	proto1.RegisterType((*PulseGroupNew)(nil), "proto.PulseGroupNew")
	proto1.RegisterType((*PulseGroupDelete)(nil), "proto.PulseGroupDelete")
	proto1.RegisterType((*PulseGroupAdd)(nil), "proto.PulseGroupAdd")
	proto1.RegisterType((*PulseGroupRemove)(nil), "proto.PulseGroupRemove")
	proto1.RegisterType((*PulseGroupAssign)(nil), "proto.PulseGroupAssign")
	proto1.RegisterType((*PulseGroupUnassign)(nil), "proto.PulseGroupUnassign")
	proto1.RegisterType((*PulseGroupList)(nil), "proto.PulseGroupList")
	proto1.RegisterType((*Group)(nil), "proto.Group")
	proto1.RegisterType((*Interfaces)(nil), "proto.Interfaces")
	proto1.RegisterType((*GroupRow)(nil), "proto.GroupRow")
	proto1.RegisterType((*GroupTable)(nil), "proto.GroupTable")
	proto1.RegisterType((*PulseConfigSync)(nil), "proto.PulseConfigSync")
	proto1.RegisterType((*PulsePromote)(nil), "proto.PulsePromote")
	proto1.RegisterEnum("proto.HealthCheckRequest_ServingRequest", HealthCheckRequest_ServingRequest_name, HealthCheckRequest_ServingRequest_value)
	proto1.RegisterEnum("proto.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
	proto1.RegisterEnum("proto.MemberStatus_Status", MemberStatus_Status_name, MemberStatus_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CLI service

type CLIClient interface {
	// Join Cluster
	Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error)
	// Leave Cluster
	Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error)
	// Create Cluster
	Create(ctx context.Context, in *PulseCreate, opts ...grpc.CallOption) (*PulseCreate, error)
	// Create floating ip group
	NewGroup(ctx context.Context, in *PulseGroupNew, opts ...grpc.CallOption) (*PulseGroupNew, error)
	// Delete floating ip group
	DeleteGroup(ctx context.Context, in *PulseGroupDelete, opts ...grpc.CallOption) (*PulseGroupDelete, error)
	// Add floating IP
	GroupIPAdd(ctx context.Context, in *PulseGroupAdd, opts ...grpc.CallOption) (*PulseGroupAdd, error)
	// Remove floating IP
	GroupIPRemove(ctx context.Context, in *PulseGroupRemove, opts ...grpc.CallOption) (*PulseGroupRemove, error)
	// Assign a group
	GroupAssign(ctx context.Context, in *PulseGroupAssign, opts ...grpc.CallOption) (*PulseGroupAssign, error)
	// Unassign a group
	GroupUnassign(ctx context.Context, in *PulseGroupUnassign, opts ...grpc.CallOption) (*PulseGroupUnassign, error)
	// Get group list
	GroupList(ctx context.Context, in *GroupTable, opts ...grpc.CallOption) (*GroupTable, error)
}

type cLIClient struct {
	cc *grpc.ClientConn
}

func NewCLIClient(cc *grpc.ClientConn) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error) {
	out := new(PulseJoin)
	err := grpc.Invoke(ctx, "/proto.CLI/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error) {
	out := new(PulseLeave)
	err := grpc.Invoke(ctx, "/proto.CLI/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Create(ctx context.Context, in *PulseCreate, opts ...grpc.CallOption) (*PulseCreate, error) {
	out := new(PulseCreate)
	err := grpc.Invoke(ctx, "/proto.CLI/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) NewGroup(ctx context.Context, in *PulseGroupNew, opts ...grpc.CallOption) (*PulseGroupNew, error) {
	out := new(PulseGroupNew)
	err := grpc.Invoke(ctx, "/proto.CLI/NewGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) DeleteGroup(ctx context.Context, in *PulseGroupDelete, opts ...grpc.CallOption) (*PulseGroupDelete, error) {
	out := new(PulseGroupDelete)
	err := grpc.Invoke(ctx, "/proto.CLI/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupIPAdd(ctx context.Context, in *PulseGroupAdd, opts ...grpc.CallOption) (*PulseGroupAdd, error) {
	out := new(PulseGroupAdd)
	err := grpc.Invoke(ctx, "/proto.CLI/GroupIPAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupIPRemove(ctx context.Context, in *PulseGroupRemove, opts ...grpc.CallOption) (*PulseGroupRemove, error) {
	out := new(PulseGroupRemove)
	err := grpc.Invoke(ctx, "/proto.CLI/GroupIPRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupAssign(ctx context.Context, in *PulseGroupAssign, opts ...grpc.CallOption) (*PulseGroupAssign, error) {
	out := new(PulseGroupAssign)
	err := grpc.Invoke(ctx, "/proto.CLI/GroupAssign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupUnassign(ctx context.Context, in *PulseGroupUnassign, opts ...grpc.CallOption) (*PulseGroupUnassign, error) {
	out := new(PulseGroupUnassign)
	err := grpc.Invoke(ctx, "/proto.CLI/GroupUnassign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupList(ctx context.Context, in *GroupTable, opts ...grpc.CallOption) (*GroupTable, error) {
	out := new(GroupTable)
	err := grpc.Invoke(ctx, "/proto.CLI/GroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CLI service

type CLIServer interface {
	// Join Cluster
	Join(context.Context, *PulseJoin) (*PulseJoin, error)
	// Leave Cluster
	Leave(context.Context, *PulseLeave) (*PulseLeave, error)
	// Create Cluster
	Create(context.Context, *PulseCreate) (*PulseCreate, error)
	// Create floating ip group
	NewGroup(context.Context, *PulseGroupNew) (*PulseGroupNew, error)
	// Delete floating ip group
	DeleteGroup(context.Context, *PulseGroupDelete) (*PulseGroupDelete, error)
	// Add floating IP
	GroupIPAdd(context.Context, *PulseGroupAdd) (*PulseGroupAdd, error)
	// Remove floating IP
	GroupIPRemove(context.Context, *PulseGroupRemove) (*PulseGroupRemove, error)
	// Assign a group
	GroupAssign(context.Context, *PulseGroupAssign) (*PulseGroupAssign, error)
	// Unassign a group
	GroupUnassign(context.Context, *PulseGroupUnassign) (*PulseGroupUnassign, error)
	// Get group list
	GroupList(context.Context, *GroupTable) (*GroupTable, error)
}

func RegisterCLIServer(s *grpc.Server, srv CLIServer) {
	s.RegisterService(&_CLI_serviceDesc, srv)
}

func _CLI_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Join(ctx, req.(*PulseJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Leave(ctx, req.(*PulseLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Create(ctx, req.(*PulseCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_NewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).NewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/NewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).NewGroup(ctx, req.(*PulseGroupNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).DeleteGroup(ctx, req.(*PulseGroupDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupIPAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupIPAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupIPAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupIPAdd(ctx, req.(*PulseGroupAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupIPRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupIPRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupIPRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupIPRemove(ctx, req.(*PulseGroupRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupAssign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupAssign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupAssign(ctx, req.(*PulseGroupAssign))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupUnassign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseGroupUnassign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupUnassign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupUnassign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupUnassign(ctx, req.(*PulseGroupUnassign))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupList(ctx, req.(*GroupTable))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _CLI_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _CLI_Leave_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CLI_Create_Handler,
		},
		{
			MethodName: "NewGroup",
			Handler:    _CLI_NewGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _CLI_DeleteGroup_Handler,
		},
		{
			MethodName: "GroupIPAdd",
			Handler:    _CLI_GroupIPAdd_Handler,
		},
		{
			MethodName: "GroupIPRemove",
			Handler:    _CLI_GroupIPRemove_Handler,
		},
		{
			MethodName: "GroupAssign",
			Handler:    _CLI_GroupAssign_Handler,
		},
		{
			MethodName: "GroupUnassign",
			Handler:    _CLI_GroupUnassign_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _CLI_GroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pulse.proto",
}

// Client API for Server service

type ServerClient interface {
	// Perform GRPC Health Check
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Join Cluster
	Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error)
	// Sync Config
	ConfigSync(ctx context.Context, in *PulseConfigSync, opts ...grpc.CallOption) (*PulseConfigSync, error)
	// Leave Cluster
	Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error)
	// Promote
	RpcMakeActive(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/proto.Server/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Join(ctx context.Context, in *PulseJoin, opts ...grpc.CallOption) (*PulseJoin, error) {
	out := new(PulseJoin)
	err := grpc.Invoke(ctx, "/proto.Server/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ConfigSync(ctx context.Context, in *PulseConfigSync, opts ...grpc.CallOption) (*PulseConfigSync, error) {
	out := new(PulseConfigSync)
	err := grpc.Invoke(ctx, "/proto.Server/ConfigSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Leave(ctx context.Context, in *PulseLeave, opts ...grpc.CallOption) (*PulseLeave, error) {
	out := new(PulseLeave)
	err := grpc.Invoke(ctx, "/proto.Server/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RpcMakeActive(ctx context.Context, in *PulsePromote, opts ...grpc.CallOption) (*PulsePromote, error) {
	out := new(PulsePromote)
	err := grpc.Invoke(ctx, "/proto.Server/rpcMakeActive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerServer interface {
	// Perform GRPC Health Check
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Join Cluster
	Join(context.Context, *PulseJoin) (*PulseJoin, error)
	// Sync Config
	ConfigSync(context.Context, *PulseConfigSync) (*PulseConfigSync, error)
	// Leave Cluster
	Leave(context.Context, *PulseLeave) (*PulseLeave, error)
	// Promote
	RpcMakeActive(context.Context, *PulsePromote) (*PulsePromote, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Join(ctx, req.(*PulseJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ConfigSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseConfigSync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ConfigSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/ConfigSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ConfigSync(ctx, req.(*PulseConfigSync))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Leave(ctx, req.(*PulseLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RpcMakeActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulsePromote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RpcMakeActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/RpcMakeActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RpcMakeActive(ctx, req.(*PulsePromote))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Server_Check_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Server_Join_Handler,
		},
		{
			MethodName: "ConfigSync",
			Handler:    _Server_ConfigSync_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Server_Leave_Handler,
		},
		{
			MethodName: "rpcMakeActive",
			Handler:    _Server_RpcMakeActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pulse.proto",
}

func init() { proto1.RegisterFile("proto/pulse.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1060 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xe3, 0xc4, 0x1b, 0x9f, 0xfc, 0xac, 0x77, 0xba, 0xda, 0x1a, 0x83, 0x20, 0xf5, 0x4d,
	0x23, 0x04, 0x01, 0x82, 0x84, 0x5a, 0x84, 0x28, 0x6e, 0x9a, 0xee, 0x06, 0x52, 0x37, 0x72, 0x92,
	0x05, 0x7a, 0x83, 0xbc, 0xce, 0x34, 0x6b, 0x6d, 0x62, 0x1b, 0xdb, 0x49, 0xb4, 0x12, 0x5c, 0x20,
	0xee, 0x11, 0x0f, 0xc0, 0x4b, 0x70, 0xc1, 0x13, 0x70, 0xc3, 0xcb, 0xf0, 0x0e, 0x68, 0x7e, 0x92,
	0x4c, 0xd6, 0x49, 0x51, 0x23, 0x7e, 0xae, 0x32, 0xe7, 0xfb, 0xce, 0x99, 0xf3, 0x4d, 0x66, 0xce,
	0x39, 0x86, 0xa3, 0x28, 0x0e, 0xd3, 0xf0, 0xbd, 0x68, 0x36, 0x49, 0x70, 0x83, 0xae, 0x51, 0x81,
	0xfe, 0x98, 0x3f, 0x48, 0x80, 0xce, 0xb0, 0x3b, 0x49, 0x2f, 0x5b, 0x97, 0xd8, 0xbb, 0x72, 0xf0,
	0xb7, 0x33, 0x9c, 0xa4, 0xe8, 0x11, 0x1c, 0xc4, 0x6c, 0xa9, 0x4b, 0x35, 0xa9, 0x5e, 0x6d, 0xd6,
	0x59, 0x58, 0x23, 0xeb, 0xdb, 0xe8, 0xe3, 0x78, 0xee, 0x07, 0x63, 0x6e, 0x3a, 0xcb, 0x40, 0xf3,
	0x1e, 0x54, 0x37, 0x29, 0xa4, 0x42, 0xa1, 0xdf, 0x1e, 0x0c, 0x7b, 0xda, 0x2d, 0x04, 0xa0, 0xf4,
	0x07, 0xd6, 0x60, 0xd8, 0xd7, 0x24, 0xf3, 0x57, 0x09, 0x6e, 0x6f, 0xec, 0x9b, 0x44, 0x61, 0x90,
	0x60, 0xf4, 0x19, 0x28, 0x49, 0xea, 0xa6, 0xb3, 0xe4, 0x65, 0x1a, 0x98, 0xef, 0x52, 0x44, 0x9f,
	0xfa, 0x3b, 0x3c, 0xce, 0xfc, 0x0a, 0x2a, 0x1b, 0x04, 0x2a, 0xc1, 0xc1, 0xd0, 0xfe, 0xc2, 0x7e,
	0xf6, 0xa5, 0xad, 0xdd, 0x42, 0x1a, 0x94, 0x87, 0x76, 0xeb, 0x99, 0xfd, 0xa4, 0x73, 0x3a, 0x74,
	0xda, 0x8f, 0x35, 0x09, 0x55, 0x01, 0x04, 0x3b, 0x47, 0xdc, 0x9f, 0x58, 0x9d, 0xee, 0x79, 0xdb,
	0xd1, 0x64, 0x62, 0x9c, 0xb5, 0xad, 0xee, 0xe0, 0xec, 0x6b, 0x2d, 0x6f, 0xfe, 0x28, 0x41, 0xf9,
	0x29, 0x9e, 0x5e, 0xe0, 0x98, 0xef, 0xdc, 0xbc, 0x21, 0xd6, 0xe0, 0x62, 0x45, 0xa7, 0xc6, 0x0d,
	0x79, 0x0f, 0x41, 0xe1, 0xd1, 0x00, 0x8a, 0xd5, 0x1a, 0x74, 0xce, 0xdb, 0xda, 0x2d, 0x92, 0xa7,
	0xdb, 0xb6, 0xce, 0x3b, 0xf6, 0xa9, 0x26, 0x11, 0xa3, 0x67, 0xf5, 0xfb, 0x84, 0xc9, 0xa1, 0x43,
	0x28, 0x0d, 0x6d, 0xeb, 0xdc, 0xea, 0x74, 0xad, 0x47, 0xdd, 0xb6, 0x26, 0x9b, 0x7f, 0x4a, 0xa0,
	0xf6, 0xc8, 0xa5, 0x7e, 0x1e, 0xfa, 0x01, 0xd2, 0xe1, 0x20, 0x99, 0x79, 0x1e, 0x4e, 0x98, 0x86,
	0xa2, 0xb3, 0x34, 0x09, 0x33, 0xc5, 0x49, 0xe2, 0x8e, 0xb1, 0x9e, 0xab, 0x49, 0x75, 0xd5, 0x59,
	0x9a, 0xe8, 0x0e, 0x1c, 0x5c, 0xf8, 0xc1, 0xe8, 0x1b, 0x3f, 0xd2, 0x65, 0xca, 0x28, 0xc4, 0xec,
	0x44, 0xe8, 0x75, 0x50, 0x29, 0x11, 0x85, 0x71, 0xaa, 0xe7, 0x29, 0x55, 0x24, 0x40, 0x2f, 0x8c,
	0x53, 0x54, 0x85, 0x9c, 0x1f, 0xe9, 0x05, 0x8a, 0xe6, 0xfc, 0x08, 0x21, 0xc8, 0x53, 0x3f, 0x85,
	0x22, 0x74, 0x8d, 0x0c, 0x28, 0x5e, 0x86, 0x49, 0x1a, 0xb8, 0x53, 0xac, 0x1f, 0xb0, 0xf8, 0xa5,
	0x8d, 0xde, 0x04, 0x88, 0x71, 0x34, 0xf1, 0x3d, 0x37, 0xc5, 0x23, 0xbd, 0x48, 0xc5, 0x0a, 0x08,
	0x3a, 0x01, 0xc5, 0x0b, 0x83, 0x17, 0xfe, 0x58, 0x57, 0x6b, 0x52, 0xbd, 0xec, 0x70, 0xcb, 0xfc,
	0x0e, 0x80, 0x1e, 0xb7, 0x8b, 0xdd, 0x39, 0xde, 0xeb, 0xbc, 0xa2, 0x2a, 0xf9, 0xa5, 0xaa, 0xf2,
	0x37, 0x55, 0x99, 0x0b, 0x28, 0xd1, 0xec, 0xad, 0x18, 0xbb, 0x29, 0xfe, 0xef, 0xfe, 0x6e, 0xb3,
	0x05, 0x15, 0x9a, 0xf8, 0x34, 0x0e, 0x67, 0x91, 0x8d, 0x17, 0xfb, 0xa4, 0x36, 0x9f, 0x83, 0xb6,
	0xde, 0xe4, 0x31, 0x9e, 0xe0, 0x3d, 0x8f, 0x80, 0x20, 0x2f, 0xfc, 0x7b, 0x74, 0x6d, 0xfa, 0xa2,
	0x40, 0x6b, 0x34, 0xfa, 0xa7, 0x36, 0x46, 0x1a, 0xc8, 0x7e, 0x94, 0xe8, 0xf9, 0x9a, 0x5c, 0x57,
	0x1d, 0xb2, 0x34, 0x27, 0xe2, 0x31, 0x1c, 0x3c, 0x0d, 0xe7, 0xf8, 0x5f, 0xcc, 0xf6, 0x93, 0x24,
	0xa6, 0xb3, 0x92, 0xc4, 0x1f, 0xef, 0x57, 0x67, 0xc7, 0x50, 0x18, 0x93, 0x2d, 0x78, 0x3e, 0x66,
	0xa0, 0x37, 0x40, 0xf5, 0x83, 0x14, 0xc7, 0x2f, 0x5c, 0x0f, 0xf3, 0x5b, 0x5f, 0x03, 0x54, 0x62,
	0x38, 0xc2, 0xbc, 0xce, 0xe8, 0xda, 0xfc, 0x59, 0x02, 0xb4, 0x16, 0x34, 0x0c, 0xdc, 0xff, 0x5f,
	0xd2, 0x1f, 0x12, 0x54, 0xd7, 0x92, 0xba, 0x7e, 0x92, 0xee, 0x25, 0xe7, 0x01, 0x28, 0x54, 0x41,
	0xa2, 0xcb, 0x35, 0xb9, 0x5e, 0x6a, 0xde, 0xe5, 0x0d, 0x74, 0x73, 0xeb, 0x06, 0x5d, 0x25, 0xed,
	0x20, 0x8d, 0xaf, 0x1d, 0x1e, 0x60, 0x9c, 0x42, 0x49, 0x80, 0xc9, 0x35, 0x5e, 0xe1, 0x6b, 0x9a,
	0x59, 0x75, 0xc8, 0x12, 0x99, 0x50, 0x98, 0xbb, 0x93, 0x19, 0xcb, 0x59, 0x6a, 0x96, 0xf9, 0xd6,
	0xec, 0x0d, 0x31, 0xea, 0xe3, 0xdc, 0x7d, 0xc9, 0xfc, 0x4d, 0x82, 0x02, 0x05, 0x97, 0x4f, 0x41,
	0x5a, 0x3d, 0x05, 0xd4, 0x86, 0x0a, 0x39, 0x6e, 0x67, 0xf5, 0xe7, 0xe4, 0xa8, 0xcc, 0xb7, 0xc4,
	0xbd, 0x1a, 0xb6, 0xe8, 0xc1, 0x44, 0x6e, 0x46, 0x19, 0x7d, 0x40, 0x59, 0xa7, 0x2d, 0x92, 0xef,
	0x6d, 0x4a, 0x3e, 0xe2, 0x69, 0x56, 0x71, 0x89, 0xa8, 0xfb, 0x1d, 0x80, 0x35, 0x41, 0xfa, 0xd8,
	0xea, 0xc6, 0x96, 0x47, 0x10, 0x10, 0x73, 0x04, 0x45, 0x76, 0xf2, 0x70, 0xb1, 0x2a, 0x03, 0x49,
	0x28, 0x03, 0xd6, 0xdd, 0x73, 0x34, 0x8e, 0x74, 0xf7, 0x63, 0x28, 0x90, 0x33, 0xb0, 0x8b, 0x51,
	0x1d, 0x66, 0xdc, 0xc8, 0x92, 0xcf, 0x64, 0xf1, 0x00, 0x68, 0x96, 0x81, 0x7b, 0x31, 0xd9, 0xaf,
	0x44, 0xef, 0x82, 0x1c, 0x87, 0x0b, 0xfe, 0x1c, 0x0e, 0x37, 0xee, 0x2c, 0x5c, 0x38, 0x84, 0x33,
	0xbf, 0x87, 0x43, 0xd6, 0x92, 0xe9, 0x7c, 0xe8, 0x5f, 0x07, 0xde, 0x5e, 0x99, 0xd6, 0xf3, 0x46,
	0x16, 0xe7, 0xcd, 0xdf, 0x4e, 0x84, 0xe7, 0x50, 0xa6, 0xe9, 0x7b, 0x71, 0x38, 0x0d, 0xf7, 0xec,
	0xa7, 0x27, 0xa0, 0x4c, 0xe9, 0x37, 0xc2, 0x72, 0x22, 0x30, 0xab, 0xf9, 0x7b, 0x1e, 0xe4, 0x56,
	0xb7, 0x83, 0xde, 0x86, 0x3c, 0x9d, 0xee, 0x9a, 0x58, 0x0f, 0x04, 0x31, 0x32, 0x08, 0x7a, 0x17,
	0x0a, 0x6c, 0x34, 0x1e, 0x89, 0x14, 0x85, 0x8c, 0x2c, 0x84, 0xde, 0x07, 0x85, 0xcf, 0x32, 0x24,
	0x92, 0x0c, 0x33, 0xb6, 0x60, 0xe8, 0x23, 0x28, 0xda, 0x78, 0xc1, 0x4a, 0xe4, 0x38, 0x53, 0xa0,
	0x36, 0x5e, 0x18, 0x5b, 0x51, 0xf4, 0x10, 0x4a, 0x6c, 0xe4, 0xb0, 0xd0, 0x3b, 0x19, 0x27, 0xc6,
	0x1a, 0xbb, 0x08, 0x74, 0x9f, 0xbf, 0xa6, 0x4e, 0x8f, 0x8c, 0x97, 0x6c, 0x12, 0x6b, 0x34, 0x32,
	0xb6, 0xa2, 0xc8, 0x82, 0x0a, 0x8f, 0xe4, 0xd3, 0x22, 0x9b, 0x83, 0x11, 0xc6, 0x2e, 0x82, 0xa8,
	0x17, 0xfb, 0x7f, 0xd6, 0x8f, 0x11, 0xc6, 0x2e, 0x82, 0xf4, 0x8e, 0xcd, 0x7e, 0xfd, 0x5a, 0xc6,
	0x73, 0x49, 0x19, 0xbb, 0x29, 0xf4, 0x01, 0xa8, 0xeb, 0x1e, 0x7b, 0x24, 0x16, 0x04, 0x2d, 0x32,
	0x23, 0x0b, 0x35, 0x7f, 0xc9, 0x81, 0x42, 0x3e, 0x81, 0x71, 0x8c, 0x3e, 0x85, 0x02, 0xfd, 0x66,
	0x5e, 0x25, 0xcf, 0x7e, 0xcb, 0x1b, 0xc6, 0xee, 0x4f, 0xec, 0x57, 0x7a, 0x88, 0x9f, 0x00, 0x08,
	0x25, 0x79, 0xb2, 0xf1, 0x92, 0x56, 0xb8, 0xb1, 0x03, 0x7f, 0xd5, 0x67, 0xfc, 0x00, 0x2a, 0x71,
	0xe4, 0x3d, 0x75, 0xaf, 0xb0, 0xe5, 0xa5, 0xfe, 0x1c, 0xa3, 0xdb, 0xa2, 0x0f, 0xaf, 0x4d, 0x63,
	0x1b, 0x78, 0xa1, 0x50, 0xec, 0xc3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xf2, 0x03, 0xee,
	0x21, 0x0d, 0x00, 0x00,
}
